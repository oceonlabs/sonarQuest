import {
  DevtoolsProvider,
  PLUGIN_CONTAINER_ID,
  PLUGIN_TITLE_CONTAINER_ID,
  Portal,
  createComponent,
  initialState,
  lazy,
  render
} from "./chunk-7SXU2UNK.js";
import {
  require_react_dom
} from "./chunk-D3DZJBFX.js";
import {
  require_jsx_runtime
} from "./chunk-N7LDLKDV.js";
import {
  require_react
} from "./chunk-3NKJPI5X.js";
import {
  __privateAdd,
  __privateGet,
  __privateSet,
  __toESM
} from "./chunk-24O5ED5J.js";

// node_modules/@tanstack/devtools-event-bus/dist/esm/client/client.js
var _port, _socket, _eventSource, _eventTarget, _debug, _connectToServerBus, _dispatcher, _connectFunction;
var ClientEventBus = class {
  constructor({
    port = 42069,
    debug = false,
    connectToServerBus = false
  } = {}) {
    __privateAdd(this, _port);
    __privateAdd(this, _socket);
    __privateAdd(this, _eventSource);
    __privateAdd(this, _eventTarget);
    __privateAdd(this, _debug);
    __privateAdd(this, _connectToServerBus);
    __privateAdd(this, _dispatcher, (e) => {
      const event = e.detail;
      this.emitToServer(event);
      this.emitToClients(event);
    });
    __privateAdd(this, _connectFunction, () => {
      this.debugLog(
        "Connection request made to event-bus, replying back with success"
      );
      __privateGet(this, _eventTarget).dispatchEvent(new CustomEvent("tanstack-connect-success"));
    });
    __privateSet(this, _debug, debug);
    __privateSet(this, _eventSource, null);
    __privateSet(this, _port, port);
    __privateSet(this, _socket, null);
    __privateSet(this, _connectToServerBus, connectToServerBus);
    __privateSet(this, _eventTarget, this.getGlobalTarget());
    this.debugLog("Initializing client event bus");
  }
  emitToClients(event) {
    this.debugLog("Emitting event from client bus", event);
    const specificEvent = new CustomEvent(event.type, { detail: event });
    this.debugLog("Emitting event to specific client listeners", event);
    __privateGet(this, _eventTarget).dispatchEvent(specificEvent);
    const globalEvent = new CustomEvent("tanstack-devtools-global", {
      detail: event
    });
    this.debugLog("Emitting event to global client listeners", event);
    __privateGet(this, _eventTarget).dispatchEvent(globalEvent);
  }
  emitToServer(event) {
    const json = JSON.stringify(event);
    if (__privateGet(this, _socket) && __privateGet(this, _socket).readyState === WebSocket.OPEN) {
      this.debugLog("Emitting event to server via WS", event);
      __privateGet(this, _socket).send(json);
    } else if (__privateGet(this, _eventSource)) {
      this.debugLog("Emitting event to server via SSE", event);
      fetch(`http://localhost:${__privateGet(this, _port)}/__devtools/send`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: json
      }).catch(() => {
      });
    }
  }
  start() {
    this.debugLog("Starting client event bus");
    if (typeof window === "undefined") {
      return;
    }
    if (__privateGet(this, _connectToServerBus)) {
      this.connect();
    }
    __privateSet(this, _eventTarget, window);
    __privateGet(this, _eventTarget).addEventListener(
      "tanstack-dispatch-event",
      __privateGet(this, _dispatcher)
    );
    __privateGet(this, _eventTarget).addEventListener(
      "tanstack-connect",
      __privateGet(this, _connectFunction)
    );
  }
  stop() {
    var _a, _b;
    this.debugLog("Stopping client event bus");
    if (typeof window === "undefined") {
      return;
    }
    __privateGet(this, _eventTarget).removeEventListener(
      "tanstack-dispatch-event",
      __privateGet(this, _dispatcher)
    );
    __privateGet(this, _eventTarget).removeEventListener(
      "tanstack-connect",
      __privateGet(this, _connectFunction)
    );
    (_a = __privateGet(this, _eventSource)) == null ? void 0 : _a.close();
    (_b = __privateGet(this, _socket)) == null ? void 0 : _b.close();
    __privateSet(this, _socket, null);
    __privateSet(this, _eventSource, null);
  }
  getGlobalTarget() {
    if (typeof window !== "undefined") {
      return window;
    }
    return new EventTarget();
  }
  debugLog(...messages) {
    if (__privateGet(this, _debug)) {
      console.log("ðŸŒ´ [tanstack-devtools:client-bus]", ...messages);
    }
  }
  connectSSE() {
    this.debugLog("Connecting to SSE server");
    __privateSet(this, _eventSource, new EventSource(
      `http://localhost:${__privateGet(this, _port)}/__devtools/sse`
    ));
    __privateGet(this, _eventSource).onmessage = (e) => {
      this.debugLog("Received message from SSE server", e.data);
      this.handleEventReceived(e.data);
    };
  }
  connectWebSocket() {
    this.debugLog("Connecting to WebSocket server");
    __privateSet(this, _socket, new WebSocket(`ws://localhost:${__privateGet(this, _port)}/__devtools/ws`));
    __privateGet(this, _socket).onmessage = (e) => {
      this.debugLog("Received message from server", e.data);
      this.handleEventReceived(e.data);
    };
    __privateGet(this, _socket).onclose = () => {
      this.debugLog("WebSocket connection closed");
      __privateSet(this, _socket, null);
    };
    __privateGet(this, _socket).onerror = () => {
      this.debugLog("WebSocket connection error");
    };
  }
  connect() {
    try {
      this.connectWebSocket();
    } catch {
      if (typeof window === "undefined") return;
      this.connectSSE();
    }
  }
  handleEventReceived(data) {
    try {
      const event = JSON.parse(data);
      this.emitToClients(event);
    } catch {
    }
  }
};
_port = new WeakMap();
_socket = new WeakMap();
_eventSource = new WeakMap();
_eventTarget = new WeakMap();
_debug = new WeakMap();
_connectToServerBus = new WeakMap();
_dispatcher = new WeakMap();
_connectFunction = new WeakMap();

// node_modules/@tanstack/devtools/dist/esm/core.js
var _config, _plugins, _isMounted, _dispose, _Component, _eventBus, _eventBusConfig;
var TanStackDevtoolsCore = class {
  constructor(init) {
    __privateAdd(this, _config, {
      ...initialState.settings
    });
    __privateAdd(this, _plugins, []);
    __privateAdd(this, _isMounted, false);
    __privateAdd(this, _dispose);
    __privateAdd(this, _Component);
    __privateAdd(this, _eventBus);
    __privateAdd(this, _eventBusConfig);
    __privateSet(this, _plugins, init.plugins || []);
    __privateSet(this, _eventBusConfig, init.eventBusConfig);
    __privateSet(this, _config, {
      ...__privateGet(this, _config),
      ...init.config
    });
  }
  mount(el) {
    if (__privateGet(this, _isMounted)) {
      throw new Error("Devtools is already mounted");
    }
    const mountTo = el;
    const dispose = render(() => {
      const _self$ = this;
      __privateSet(this, _Component, lazy(() => import("./devtools-VPVAU5EM.js")));
      const Devtools = __privateGet(this, _Component);
      __privateSet(this, _eventBus, new ClientEventBus(__privateGet(this, _eventBusConfig)));
      __privateGet(this, _eventBus).start();
      return createComponent(DevtoolsProvider, {
        get plugins() {
          return __privateGet(_self$, _plugins);
        },
        get config() {
          return __privateGet(_self$, _config);
        },
        get children() {
          return createComponent(Portal, {
            mount: mountTo,
            get children() {
              return createComponent(Devtools, {});
            }
          });
        }
      });
    }, mountTo);
    __privateSet(this, _isMounted, true);
    __privateSet(this, _dispose, dispose);
  }
  unmount() {
    var _a, _b;
    if (!__privateGet(this, _isMounted)) {
      throw new Error("Devtools is not mounted");
    }
    (_a = __privateGet(this, _eventBus)) == null ? void 0 : _a.stop();
    (_b = __privateGet(this, _dispose)) == null ? void 0 : _b.call(this);
    __privateSet(this, _isMounted, false);
  }
  setConfig(config) {
    __privateSet(this, _config, {
      ...__privateGet(this, _config),
      ...config
    });
  }
};
_config = new WeakMap();
_plugins = new WeakMap();
_isMounted = new WeakMap();
_dispose = new WeakMap();
_Component = new WeakMap();
_eventBus = new WeakMap();
_eventBusConfig = new WeakMap();

// node_modules/@tanstack/react-devtools/dist/esm/devtools.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var convertRender = (Component, setComponent) => {
  setComponent(typeof Component === "function" ? Component() : Component);
};
var TanstackDevtools = ({
  plugins,
  config,
  eventBusConfig
}) => {
  const devToolRef = (0, import_react.useRef)(null);
  const [pluginContainer, setPluginContainer] = (0, import_react.useState)(
    null
  );
  const [titleContainer, setTitleContainer] = (0, import_react.useState)(null);
  const [PluginComponent, setPluginComponent] = (0, import_react.useState)(
    null
  );
  const [TitleComponent, setTitleComponent] = (0, import_react.useState)(null);
  const [devtools] = (0, import_react.useState)(
    () => new TanStackDevtoolsCore({
      config,
      eventBusConfig,
      plugins: plugins == null ? void 0 : plugins.map((plugin) => {
        return {
          ...plugin,
          name: typeof plugin.name === "string" ? plugin.name : (
            // The check above confirms that `plugin.name` is of Render type
            (() => {
              setTitleContainer(
                document.getElementById(PLUGIN_TITLE_CONTAINER_ID) || null
              );
              convertRender(
                plugin.name,
                setTitleComponent
              );
            })
          ),
          render: () => {
            setPluginContainer(
              document.getElementById(PLUGIN_CONTAINER_ID) || null
            );
            convertRender(plugin.render, setPluginComponent);
          }
        };
      })
    })
  );
  (0, import_react.useEffect)(() => {
    if (devToolRef.current) {
      devtools.mount(devToolRef.current);
    }
    return () => devtools.unmount();
  }, [devtools]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)("div", { ref: devToolRef }),
    pluginContainer && PluginComponent ? (0, import_react_dom.createPortal)((0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: PluginComponent }), pluginContainer) : null,
    titleContainer && TitleComponent ? (0, import_react_dom.createPortal)((0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: TitleComponent }), titleContainer) : null
  ] });
};
export {
  PLUGIN_CONTAINER_ID,
  PLUGIN_TITLE_CONTAINER_ID,
  TanStackDevtoolsCore,
  TanstackDevtools
};
//# sourceMappingURL=@tanstack_react-devtools.js.map
