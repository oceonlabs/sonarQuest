import {
  DevtoolsProvider,
  PLUGIN_CONTAINER_ID,
  PLUGIN_TITLE_CONTAINER_ID,
  Portal,
  createComponent,
  initialState,
  lazy,
  render
} from "./chunk-QEDJJX2T.js";
import {
  require_react_dom
} from "./chunk-AUFLGUIX.js";
import {
  require_jsx_runtime
} from "./chunk-XO4JX7VM.js";
import {
  require_react
} from "./chunk-PSQR3SVX.js";
import {
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/@tanstack/devtools-event-bus/dist/esm/client/client.js
var ClientEventBus = class {
  #port;
  #socket;
  #eventSource;
  #eventTarget;
  #debug;
  #connectToServerBus;
  #dispatcher = (e) => {
    const event = e.detail;
    this.emitToServer(event);
    this.emitToClients(event);
  };
  #connectFunction = () => {
    this.debugLog(
      "Connection request made to event-bus, replying back with success"
    );
    this.#eventTarget.dispatchEvent(new CustomEvent("tanstack-connect-success"));
  };
  constructor({
    port = 42069,
    debug = false,
    connectToServerBus = false
  } = {}) {
    this.#debug = debug;
    this.#eventSource = null;
    this.#port = port;
    this.#socket = null;
    this.#connectToServerBus = connectToServerBus;
    this.#eventTarget = this.getGlobalTarget();
    this.debugLog("Initializing client event bus");
  }
  emitToClients(event) {
    this.debugLog("Emitting event from client bus", event);
    const specificEvent = new CustomEvent(event.type, { detail: event });
    this.debugLog("Emitting event to specific client listeners", event);
    this.#eventTarget.dispatchEvent(specificEvent);
    const globalEvent = new CustomEvent("tanstack-devtools-global", {
      detail: event
    });
    this.debugLog("Emitting event to global client listeners", event);
    this.#eventTarget.dispatchEvent(globalEvent);
  }
  emitToServer(event) {
    const json = JSON.stringify(event);
    if (this.#socket && this.#socket.readyState === WebSocket.OPEN) {
      this.debugLog("Emitting event to server via WS", event);
      this.#socket.send(json);
    } else if (this.#eventSource) {
      this.debugLog("Emitting event to server via SSE", event);
      fetch(`http://localhost:${this.#port}/__devtools/send`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: json
      }).catch(() => {
      });
    }
  }
  start() {
    this.debugLog("Starting client event bus");
    if (typeof window === "undefined") {
      return;
    }
    if (this.#connectToServerBus) {
      this.connect();
    }
    this.#eventTarget = window;
    this.#eventTarget.addEventListener(
      "tanstack-dispatch-event",
      this.#dispatcher
    );
    this.#eventTarget.addEventListener(
      "tanstack-connect",
      this.#connectFunction
    );
  }
  stop() {
    this.debugLog("Stopping client event bus");
    if (typeof window === "undefined") {
      return;
    }
    this.#eventTarget.removeEventListener(
      "tanstack-dispatch-event",
      this.#dispatcher
    );
    this.#eventTarget.removeEventListener(
      "tanstack-connect",
      this.#connectFunction
    );
    this.#eventSource?.close();
    this.#socket?.close();
    this.#socket = null;
    this.#eventSource = null;
  }
  getGlobalTarget() {
    if (typeof window !== "undefined") {
      return window;
    }
    return new EventTarget();
  }
  debugLog(...messages) {
    if (this.#debug) {
      console.log("ðŸŒ´ [tanstack-devtools:client-bus]", ...messages);
    }
  }
  connectSSE() {
    this.debugLog("Connecting to SSE server");
    this.#eventSource = new EventSource(
      `http://localhost:${this.#port}/__devtools/sse`
    );
    this.#eventSource.onmessage = (e) => {
      this.debugLog("Received message from SSE server", e.data);
      this.handleEventReceived(e.data);
    };
  }
  connectWebSocket() {
    this.debugLog("Connecting to WebSocket server");
    this.#socket = new WebSocket(`ws://localhost:${this.#port}/__devtools/ws`);
    this.#socket.onmessage = (e) => {
      this.debugLog("Received message from server", e.data);
      this.handleEventReceived(e.data);
    };
    this.#socket.onclose = () => {
      this.debugLog("WebSocket connection closed");
      this.#socket = null;
    };
    this.#socket.onerror = () => {
      this.debugLog("WebSocket connection error");
    };
  }
  connect() {
    try {
      this.connectWebSocket();
    } catch {
      if (typeof window === "undefined") return;
      this.connectSSE();
    }
  }
  handleEventReceived(data) {
    try {
      const event = JSON.parse(data);
      this.emitToClients(event);
    } catch {
    }
  }
};

// node_modules/@tanstack/devtools/dist/esm/core.js
var TanStackDevtoolsCore = class {
  #config = {
    ...initialState.settings
  };
  #plugins = [];
  #isMounted = false;
  #dispose;
  #Component;
  #eventBus;
  #eventBusConfig;
  constructor(init) {
    this.#plugins = init.plugins || [];
    this.#eventBusConfig = init.eventBusConfig;
    this.#config = {
      ...this.#config,
      ...init.config
    };
  }
  mount(el) {
    if (this.#isMounted) {
      throw new Error("Devtools is already mounted");
    }
    const mountTo = el;
    const dispose = render(() => {
      const _self$ = this;
      this.#Component = lazy(() => import("./devtools-4B5RGFWD.js"));
      const Devtools = this.#Component;
      this.#eventBus = new ClientEventBus(this.#eventBusConfig);
      this.#eventBus.start();
      return createComponent(DevtoolsProvider, {
        get plugins() {
          return _self$.#plugins;
        },
        get config() {
          return _self$.#config;
        },
        get children() {
          return createComponent(Portal, {
            mount: mountTo,
            get children() {
              return createComponent(Devtools, {});
            }
          });
        }
      });
    }, mountTo);
    this.#isMounted = true;
    this.#dispose = dispose;
  }
  unmount() {
    if (!this.#isMounted) {
      throw new Error("Devtools is not mounted");
    }
    this.#eventBus?.stop();
    this.#dispose?.();
    this.#isMounted = false;
  }
  setConfig(config) {
    this.#config = {
      ...this.#config,
      ...config
    };
  }
};

// node_modules/@tanstack/react-devtools/dist/esm/devtools.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var convertRender = (Component, setComponent) => {
  setComponent(typeof Component === "function" ? Component() : Component);
};
var TanstackDevtools = ({
  plugins,
  config,
  eventBusConfig
}) => {
  const devToolRef = (0, import_react.useRef)(null);
  const [pluginContainer, setPluginContainer] = (0, import_react.useState)(
    null
  );
  const [titleContainer, setTitleContainer] = (0, import_react.useState)(null);
  const [PluginComponent, setPluginComponent] = (0, import_react.useState)(
    null
  );
  const [TitleComponent, setTitleComponent] = (0, import_react.useState)(null);
  const [devtools] = (0, import_react.useState)(
    () => new TanStackDevtoolsCore({
      config,
      eventBusConfig,
      plugins: plugins?.map((plugin) => {
        return {
          ...plugin,
          name: typeof plugin.name === "string" ? plugin.name : (
            // The check above confirms that `plugin.name` is of Render type
            (() => {
              setTitleContainer(
                document.getElementById(PLUGIN_TITLE_CONTAINER_ID) || null
              );
              convertRender(
                plugin.name,
                setTitleComponent
              );
            })
          ),
          render: () => {
            setPluginContainer(
              document.getElementById(PLUGIN_CONTAINER_ID) || null
            );
            convertRender(plugin.render, setPluginComponent);
          }
        };
      })
    })
  );
  (0, import_react.useEffect)(() => {
    if (devToolRef.current) {
      devtools.mount(devToolRef.current);
    }
    return () => devtools.unmount();
  }, [devtools]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)("div", { ref: devToolRef }),
    pluginContainer && PluginComponent ? (0, import_react_dom.createPortal)((0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: PluginComponent }), pluginContainer) : null,
    titleContainer && TitleComponent ? (0, import_react_dom.createPortal)((0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: TitleComponent }), titleContainer) : null
  ] });
};
export {
  PLUGIN_CONTAINER_ID,
  PLUGIN_TITLE_CONTAINER_ID,
  TanStackDevtoolsCore,
  TanstackDevtools
};
//# sourceMappingURL=@tanstack_react-devtools.js.map
