{
  "version": 3,
  "sources": ["../../@tanstack/devtools-event-bus/src/client/client.ts", "../../@tanstack/devtools/src/core.tsx", "../../@tanstack/react-devtools/src/devtools.tsx"],
  "sourcesContent": ["interface TanStackDevtoolsEvent<TEventName extends string, TPayload = any> {\n  type: TEventName\n  payload: TPayload\n  pluginId?: string // Optional pluginId to filter events by plugin\n}\n\nexport interface ClientEventBusConfig {\n  /**\n   * Optional flag to indicate if the devtools server event bus is available to connect to.\n   * This is used to determine if the devtools can connect to the server for real-time event streams.\n   */\n  connectToServerBus?: boolean\n\n  /**\n   * Optional flag to enable debug mode for the event bus.\n   */\n  debug?: boolean\n\n  /**\n   * Optional port to connect to the devtools server event bus.\n   * Defaults to 42069.\n   */\n  port?: number\n}\n\nexport class ClientEventBus {\n  #port: number\n  #socket: WebSocket | null\n  #eventSource: EventSource | null\n  #eventTarget: EventTarget\n  #debug: boolean\n  #connectToServerBus: boolean\n\n  #dispatcher = (e: Event) => {\n    const event = (e as CustomEvent).detail\n    this.emitToServer(event)\n    this.emitToClients(event)\n  }\n  #connectFunction = () => {\n    this.debugLog(\n      'Connection request made to event-bus, replying back with success',\n    )\n    this.#eventTarget.dispatchEvent(new CustomEvent('tanstack-connect-success'))\n  }\n  constructor({\n    port = 42069,\n    debug = false,\n    connectToServerBus = false,\n  }: ClientEventBusConfig = {}) {\n    this.#debug = debug\n    this.#eventSource = null\n    this.#port = port\n    this.#socket = null\n    this.#connectToServerBus = connectToServerBus\n    this.#eventTarget = this.getGlobalTarget()\n\n    this.debugLog('Initializing client event bus')\n  }\n\n  private emitToClients(event: TanStackDevtoolsEvent<string>) {\n    this.debugLog('Emitting event from client bus', event)\n    const specificEvent = new CustomEvent(event.type, { detail: event })\n    this.debugLog('Emitting event to specific client listeners', event)\n    this.#eventTarget.dispatchEvent(specificEvent)\n    const globalEvent = new CustomEvent('tanstack-devtools-global', {\n      detail: event,\n    })\n    this.debugLog('Emitting event to global client listeners', event)\n    this.#eventTarget.dispatchEvent(globalEvent)\n  }\n\n  private emitToServer(event: TanStackDevtoolsEvent<string, any>) {\n    const json = JSON.stringify(event)\n    // try to emit it to the event bus first\n    if (this.#socket && this.#socket.readyState === WebSocket.OPEN) {\n      this.debugLog('Emitting event to server via WS', event)\n      this.#socket.send(json)\n      // try to emit to SSE if WebSocket is not available (this will only happen on the client side)\n    } else if (this.#eventSource) {\n      this.debugLog('Emitting event to server via SSE', event)\n\n      fetch(`http://localhost:${this.#port}/__devtools/send`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: json,\n      }).catch(() => {})\n    }\n  }\n  start() {\n    this.debugLog('Starting client event bus')\n    if (typeof window === 'undefined') {\n      return\n    }\n    if (this.#connectToServerBus) {\n      this.connect()\n    }\n    this.#eventTarget = window\n    this.#eventTarget.addEventListener(\n      'tanstack-dispatch-event',\n      this.#dispatcher,\n    )\n    this.#eventTarget.addEventListener(\n      'tanstack-connect',\n      this.#connectFunction,\n    )\n  }\n  stop() {\n    this.debugLog('Stopping client event bus')\n    if (typeof window === 'undefined') {\n      return\n    }\n    this.#eventTarget.removeEventListener(\n      'tanstack-dispatch-event',\n      this.#dispatcher,\n    )\n    this.#eventTarget.removeEventListener(\n      'tanstack-connect',\n      this.#connectFunction,\n    )\n    this.#eventSource?.close()\n    this.#socket?.close()\n    this.#socket = null\n    this.#eventSource = null\n  }\n  private getGlobalTarget() {\n    if (typeof window !== 'undefined') {\n      return window\n    }\n\n    return new EventTarget()\n  }\n  private debugLog(...messages: Array<any>) {\n    if (this.#debug) {\n      console.log('ðŸŒ´ [tanstack-devtools:client-bus]', ...messages)\n    }\n  }\n  private connectSSE() {\n    this.debugLog('Connecting to SSE server')\n    this.#eventSource = new EventSource(\n      `http://localhost:${this.#port}/__devtools/sse`,\n    )\n    this.#eventSource.onmessage = (e) => {\n      this.debugLog('Received message from SSE server', e.data)\n      this.handleEventReceived(e.data)\n    }\n  }\n\n  private connectWebSocket() {\n    this.debugLog('Connecting to WebSocket server')\n\n    this.#socket = new WebSocket(`ws://localhost:${this.#port}/__devtools/ws`)\n    this.#socket.onmessage = (e) => {\n      this.debugLog('Received message from server', e.data)\n      this.handleEventReceived(e.data)\n    }\n    this.#socket.onclose = () => {\n      this.debugLog('WebSocket connection closed')\n      this.#socket = null\n    }\n    this.#socket.onerror = () => {\n      this.debugLog('WebSocket connection error')\n    }\n  }\n\n  private connect() {\n    try {\n      this.connectWebSocket()\n    } catch {\n      // Do not try to connect if we're on the server side\n      if (typeof window === 'undefined') return\n      this.connectSSE()\n    }\n  }\n\n  private handleEventReceived(data: string) {\n    try {\n      const event = JSON.parse(data) as TanStackDevtoolsEvent<string, any>\n      this.emitToClients(event)\n    } catch {}\n  }\n}\n", "import { lazy } from 'solid-js'\nimport { Portal, render } from 'solid-js/web'\nimport { ClientEventBus } from '@tanstack/devtools-event-bus/client'\nimport { DevtoolsProvider } from './context/devtools-context'\nimport { initialState } from './context/devtools-store'\nimport type { ClientEventBusConfig } from '@tanstack/devtools-event-bus/client'\nimport type {\n  TanStackDevtoolsConfig,\n  TanStackDevtoolsPlugin,\n} from './context/devtools-context'\n\nexport interface TanStackDevtoolsInit {\n  /**\n   * Configuration for the devtools shell. These configuration options are used to set the\n   * initial state of the devtools when it is started for the first time. Afterwards,\n   * the settings are persisted in local storage and changed through the settings panel.\n   */\n  config?: Partial<TanStackDevtoolsConfig>\n  /**\n   * Array of plugins to be used in the devtools.\n   * Each plugin has a `render` function that gives you the dom node to mount into\n   *\n   * Example:\n   * ```ts\n   *  const devtools = new TanStackDevtoolsCore({\n   *    plugins: [\n   *      {\n   *        id: \"your-plugin-id\",\n   *        name: \"Your Plugin\",\n   *        render: (el) => {\n   *          // Your render logic here\n   *        },\n   *      },\n   *    ],\n   *  })\n   * ```\n   */\n  plugins?: Array<TanStackDevtoolsPlugin>\n  eventBusConfig?: ClientEventBusConfig\n}\n\nexport class TanStackDevtoolsCore {\n  #config: TanStackDevtoolsConfig = {\n    ...initialState.settings,\n  }\n  #plugins: Array<TanStackDevtoolsPlugin> = []\n  #isMounted = false\n  #dispose?: () => void\n  #Component: any\n  #eventBus: ClientEventBus | undefined\n  #eventBusConfig: ClientEventBusConfig | undefined\n\n  constructor(init: TanStackDevtoolsInit) {\n    this.#plugins = init.plugins || []\n    this.#eventBusConfig = init.eventBusConfig\n    this.#config = {\n      ...this.#config,\n      ...init.config,\n    }\n  }\n\n  mount<T extends HTMLElement>(el: T) {\n    if (this.#isMounted) {\n      throw new Error('Devtools is already mounted')\n    }\n    const mountTo = el\n    const dispose = render(() => {\n      this.#Component = lazy(() => import('./devtools'))\n      const Devtools = this.#Component\n      this.#eventBus = new ClientEventBus(this.#eventBusConfig)\n      this.#eventBus.start()\n      return (\n        <DevtoolsProvider plugins={this.#plugins} config={this.#config}>\n          <Portal mount={mountTo}>\n            <Devtools />\n          </Portal>\n        </DevtoolsProvider>\n      )\n    }, mountTo)\n\n    this.#isMounted = true\n    this.#dispose = dispose\n  }\n\n  unmount() {\n    if (!this.#isMounted) {\n      throw new Error('Devtools is not mounted')\n    }\n    this.#eventBus?.stop()\n    this.#dispose?.()\n    this.#isMounted = false\n  }\n\n  setConfig(config: Partial<TanStackDevtoolsInit>) {\n    this.#config = {\n      ...this.#config,\n      ...config,\n    }\n  }\n}\n\nexport type { ClientEventBusConfig }\n", "import React, { useEffect, useRef, useState } from 'react'\nimport {\n  PLUGIN_CONTAINER_ID,\n  PLUGIN_TITLE_CONTAINER_ID,\n  TanStackDevtoolsCore,\n} from '@tanstack/devtools'\nimport { createPortal } from 'react-dom'\nimport type { JSX } from 'react'\nimport type {\n  ClientEventBusConfig,\n  TanStackDevtoolsConfig,\n  TanStackDevtoolsPlugin,\n} from '@tanstack/devtools'\n\ntype PluginRender = JSX.Element | (() => JSX.Element)\n\nexport type TanStackDevtoolsReactPlugin = Omit<\n  TanStackDevtoolsPlugin,\n  'render' | 'name'\n> & {\n  /**\n   * The render function can be a React element or a function that returns a React element.\n   * If it's a function, it will be called to render the plugin, otherwise it will be rendered directly.\n   *\n   * Example:\n   * ```jsx\n   *   {\n   *     render: () => <CustomPluginComponent />,\n   *   }\n   * ```\n   * or\n   * ```jsx\n   *   {\n   *     render: <CustomPluginComponent />,\n   *   }\n   * ```\n   */\n  render: PluginRender\n  /**\n   * Name to be displayed in the devtools UI.\n   * If a string, it will be used as the plugin name.\n   * If a function, it will be called with the mount element.\n   *\n   * Example:\n   * ```jsx\n   *   {\n   *     name: \"Your Plugin\",\n   *     render: () => <CustomPluginComponent />,\n   *   }\n   * ```\n   * or\n   * ```jsx\n   *   {\n   *     name:  <h1>Your Plugin title</h1>,\n   *     render: () => <CustomPluginComponent />,\n   *   }\n   * ```\n   */\n  name: string | PluginRender\n}\n\nexport interface TanStackDevtoolsReactInit {\n  /**\n   * Array of plugins to be used in the devtools.\n   * Each plugin should have a `render` function that returns a React element or a function\n   *\n   * Example:\n   * ```jsx\n   * <TanstackDevtools\n   *   plugins={[\n   *     {\n   *       id: \"your-plugin-id\",\n   *       name: \"Your Plugin\",\n   *       render: <CustomPluginComponent />,\n   *     }\n   *   ]}\n   * />\n   * ```\n   */\n  plugins?: Array<TanStackDevtoolsReactPlugin>\n  /**\n   * Configuration for the devtools shell. These configuration options are used to set the\n   * initial state of the devtools when it is started for the first time. Afterwards,\n   * the settings are persisted in local storage and changed through the settings panel.\n   */\n  config?: Partial<TanStackDevtoolsConfig>\n  /**\n   * Configuration for the TanStack Devtools client event bus.\n   */\n  eventBusConfig?: ClientEventBusConfig\n}\n\nconst convertRender = (\n  Component: PluginRender,\n  setComponent: React.Dispatch<React.SetStateAction<JSX.Element | null>>,\n) => {\n  setComponent(typeof Component === 'function' ? Component() : Component)\n}\n\nexport const TanstackDevtools = ({\n  plugins,\n  config,\n  eventBusConfig,\n}: TanStackDevtoolsReactInit) => {\n  const devToolRef = useRef<HTMLDivElement>(null)\n  const [pluginContainer, setPluginContainer] = useState<HTMLElement | null>(\n    null,\n  )\n  const [titleContainer, setTitleContainer] = useState<HTMLElement | null>(null)\n  const [PluginComponent, setPluginComponent] = useState<JSX.Element | null>(\n    null,\n  )\n  const [TitleComponent, setTitleComponent] = useState<JSX.Element | null>(null)\n  const [devtools] = useState(\n    () =>\n      new TanStackDevtoolsCore({\n        config,\n        eventBusConfig,\n        plugins: plugins?.map((plugin) => {\n          return {\n            ...plugin,\n            name:\n              typeof plugin.name === 'string'\n                ? plugin.name\n                : // The check above confirms that `plugin.name` is of Render type\n                  () => {\n                    setTitleContainer(\n                      document.getElementById(PLUGIN_TITLE_CONTAINER_ID) ||\n                        null,\n                    )\n                    convertRender(\n                      plugin.name as PluginRender,\n                      setTitleComponent,\n                    )\n                  },\n            render: () => {\n              setPluginContainer(\n                document.getElementById(PLUGIN_CONTAINER_ID) || null,\n              )\n              convertRender(plugin.render, setPluginComponent)\n            },\n          }\n        }),\n      }),\n  )\n  useEffect(() => {\n    if (devToolRef.current) {\n      devtools.mount(devToolRef.current)\n    }\n\n    return () => devtools.unmount()\n  }, [devtools])\n\n  return (\n    <>\n      <div ref={devToolRef} />\n      {pluginContainer && PluginComponent\n        ? createPortal(<>{PluginComponent}</>, pluginContainer)\n        : null}\n      {titleContainer && TitleComponent\n        ? createPortal(<>{TitleComponent}</>, titleContainer)\n        : null}\n    </>\n  )\n}\n"],
  "mappings": "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",
  "names": ["TanStackDevtoolsCore", "initialState", "settings", "constructor", "init", "plugins", "eventBusConfig", "config", "mount", "el", "Error", "mountTo", "dispose", "render", "_self$", "lazy", "Devtools", "ClientEventBus", "start", "_$createComponent", "DevtoolsProvider", "children", "Portal", "unmount", "stop", "setConfig"]
}
