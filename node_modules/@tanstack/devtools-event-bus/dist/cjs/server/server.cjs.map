{"version":3,"file":"server.cjs","sources":["../../../src/server/server.ts"],"sourcesContent":["import http from 'node:http'\nimport { WebSocket, WebSocketServer } from 'ws'\n\n// Shared types\nexport interface TanstackDevtoolsEvent<\n  TEventName extends string,\n  TPayload = any,\n> {\n  type: TEventName\n  payload: TPayload\n  pluginId?: string // Optional pluginId to filter events by plugin\n}\n// Used so no new server starts up when HMR happens\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __TANSTACK_DEVTOOLS_SERVER__: http.Server | null\n  // eslint-disable-next-line no-var\n  var __TANSTACK_DEVTOOLS_WSS_SERVER__: WebSocketServer | null\n  // eslint-disable-next-line no-var\n  var __EVENT_TARGET__: EventTarget | null\n}\n\nexport class ServerEventBus {\n  #eventTarget: EventTarget\n  #clients = new Set<WebSocket>()\n  #sseClients = new Set<http.ServerResponse>()\n  #server: http.Server | null = null\n  #wssServer: WebSocketServer | null = null\n  #port: number\n  #debug: boolean\n  #dispatcher = (e: Event) => {\n    const event = (e as CustomEvent).detail\n    this.debugLog('Dispatching event from dispatcher, forwarding', event)\n    this.emit(event)\n  }\n  #connectFunction = () => {\n    this.#eventTarget.dispatchEvent(new CustomEvent('tanstack-connect-success'))\n  }\n  constructor({ port = 42069, debug = false } = {}) {\n    this.#port = port\n    this.#eventTarget = globalThis.__EVENT_TARGET__ ?? new EventTarget()\n    // we want to set the global event target only once so that we can emit/listen to events on the server\n    if (!globalThis.__EVENT_TARGET__) {\n      globalThis.__EVENT_TARGET__ = this.#eventTarget\n    }\n    this.#server = globalThis.__TANSTACK_DEVTOOLS_SERVER__ ?? null\n    this.#wssServer = globalThis.__TANSTACK_DEVTOOLS_WSS_SERVER__ ?? null\n    this.#debug = debug\n    this.debugLog('Initializing server event bus')\n  }\n\n  private debugLog(...args: Array<any>) {\n    if (this.#debug) {\n      console.log('ðŸŒ´ [tanstack-devtools:server-bus] ', ...args)\n    }\n  }\n\n  private emitToServer(event: TanstackDevtoolsEvent<string>) {\n    this.debugLog('Emitting event to specific server listeners', event)\n    this.#eventTarget.dispatchEvent(\n      new CustomEvent(event.type, { detail: event }),\n    )\n    this.debugLog('Emitting event to global server listeners', event)\n    this.#eventTarget.dispatchEvent(\n      new CustomEvent('tanstack-devtools-global', { detail: event }),\n    )\n  }\n\n  private emitEventToClients(event: TanstackDevtoolsEvent<string>) {\n    this.debugLog('Emitting event to clients', event)\n    const json = JSON.stringify(event)\n\n    for (const client of this.#clients) {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(json)\n      }\n    }\n    for (const res of this.#sseClients) {\n      res.write(`data: ${json}\\n\\n`)\n    }\n  }\n\n  private emit(event: TanstackDevtoolsEvent<string>) {\n    this.emitEventToClients(event)\n    this.emitToServer(event)\n  }\n\n  private createSSEServer() {\n    if (this.#server) {\n      return this.#server\n    }\n    const server = http.createServer((req, res) => {\n      if (req.url === '/__devtools/sse') {\n        res.writeHead(200, {\n          'Content-Type': 'text/event-stream',\n          'Cache-Control': 'no-cache',\n          Connection: 'keep-alive',\n          'Access-Control-Allow-Origin': '*',\n        })\n        res.write('\\n')\n        this.debugLog('New SSE client connected')\n        this.#sseClients.add(res)\n        req.on('close', () => this.#sseClients.delete(res))\n        return\n      }\n\n      if (req.url === '/__devtools/send' && req.method === 'POST') {\n        let body = ''\n        req.on('data', (chunk) => (body += chunk))\n        req.on('end', () => {\n          try {\n            const msg = JSON.parse(body)\n            this.debugLog('Received event from client', msg)\n            this.emitToServer(msg)\n          } catch {}\n        })\n        res.writeHead(200).end()\n        return\n      }\n\n      res.statusCode = 404\n      res.end()\n    })\n    globalThis.__TANSTACK_DEVTOOLS_SERVER__ = server\n    this.#server = server\n    return server\n  }\n\n  private createWebSocketServer() {\n    if (this.#wssServer) {\n      return this.#wssServer\n    }\n\n    const wss = new WebSocketServer({ noServer: true })\n    this.#wssServer = wss\n    globalThis.__TANSTACK_DEVTOOLS_WSS_SERVER__ = wss\n    return wss\n  }\n\n  private handleNewConnection(wss: WebSocketServer) {\n    wss.on('connection', (ws: WebSocket) => {\n      this.debugLog('New WebSocket client connected')\n      this.#clients.add(ws)\n      ws.on('close', () => {\n        this.debugLog('WebSocket client disconnected')\n        this.#clients.delete(ws)\n      })\n      ws.on('message', (msg) => {\n        this.debugLog('Received message from WebSocket client', msg.toString())\n        const data = JSON.parse(msg.toString())\n        this.emitToServer(data)\n      })\n    })\n  }\n\n  start() {\n    if (process.env.NODE_ENV !== 'development') return\n    if (this.#server || this.#wssServer) {\n      // console.warn('Server is already running')\n      return\n    }\n    this.debugLog('Starting server event bus')\n    const server = this.createSSEServer()\n    const wss = this.createWebSocketServer()\n\n    this.#eventTarget.addEventListener(\n      'tanstack-dispatch-event',\n      this.#dispatcher,\n    )\n    this.#eventTarget.addEventListener(\n      'tanstack-connect',\n      this.#connectFunction,\n    )\n    this.handleNewConnection(wss)\n\n    // Handle connection upgrade for WebSocket\n    server.on('upgrade', (req, socket, head) => {\n      if (req.url === '/__devtools/ws') {\n        wss.handleUpgrade(req, socket, head, (ws) => {\n          this.debugLog('WebSocket connection established')\n          wss.emit('connection', ws, req)\n        })\n      }\n    })\n\n    server.listen(this.#port, () => {\n      this.debugLog(`Listening on http://localhost:${this.#port}`)\n    })\n  }\n\n  stop() {\n    this.#server?.close(() => {\n      this.debugLog('Server stopped')\n    })\n    this.#wssServer?.close(() => {\n      this.debugLog('WebSocket server stopped')\n    })\n    this.debugLog('Clearing all connections')\n    this.#clients.clear()\n    this.#sseClients.forEach((res) => res.end())\n    this.#sseClients.clear()\n    this.debugLog('Cleared all WS/SSE connections')\n    this.#server = null\n    this.#wssServer = null\n    this.#eventTarget.removeEventListener(\n      'tanstack-dispatch-event',\n      this.#dispatcher,\n    )\n    this.#eventTarget.removeEventListener(\n      'tanstack-connect',\n      this.#connectFunction,\n    )\n    this.debugLog('[tanstack-devtools] All connections cleared')\n  }\n}\n"],"names":["WebSocket","WebSocketServer","ws"],"mappings":"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"}