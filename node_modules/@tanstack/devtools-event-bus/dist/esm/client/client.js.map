{"version":3,"file":"client.js","sources":["../../../src/client/client.ts"],"sourcesContent":["interface TanStackDevtoolsEvent<TEventName extends string, TPayload = any> {\n  type: TEventName\n  payload: TPayload\n  pluginId?: string // Optional pluginId to filter events by plugin\n}\n\nexport interface ClientEventBusConfig {\n  /**\n   * Optional flag to indicate if the devtools server event bus is available to connect to.\n   * This is used to determine if the devtools can connect to the server for real-time event streams.\n   */\n  connectToServerBus?: boolean\n\n  /**\n   * Optional flag to enable debug mode for the event bus.\n   */\n  debug?: boolean\n\n  /**\n   * Optional port to connect to the devtools server event bus.\n   * Defaults to 42069.\n   */\n  port?: number\n}\n\nexport class ClientEventBus {\n  #port: number\n  #socket: WebSocket | null\n  #eventSource: EventSource | null\n  #eventTarget: EventTarget\n  #debug: boolean\n  #connectToServerBus: boolean\n\n  #dispatcher = (e: Event) => {\n    const event = (e as CustomEvent).detail\n    this.emitToServer(event)\n    this.emitToClients(event)\n  }\n  #connectFunction = () => {\n    this.debugLog(\n      'Connection request made to event-bus, replying back with success',\n    )\n    this.#eventTarget.dispatchEvent(new CustomEvent('tanstack-connect-success'))\n  }\n  constructor({\n    port = 42069,\n    debug = false,\n    connectToServerBus = false,\n  }: ClientEventBusConfig = {}) {\n    this.#debug = debug\n    this.#eventSource = null\n    this.#port = port\n    this.#socket = null\n    this.#connectToServerBus = connectToServerBus\n    this.#eventTarget = this.getGlobalTarget()\n\n    this.debugLog('Initializing client event bus')\n  }\n\n  private emitToClients(event: TanStackDevtoolsEvent<string>) {\n    this.debugLog('Emitting event from client bus', event)\n    const specificEvent = new CustomEvent(event.type, { detail: event })\n    this.debugLog('Emitting event to specific client listeners', event)\n    this.#eventTarget.dispatchEvent(specificEvent)\n    const globalEvent = new CustomEvent('tanstack-devtools-global', {\n      detail: event,\n    })\n    this.debugLog('Emitting event to global client listeners', event)\n    this.#eventTarget.dispatchEvent(globalEvent)\n  }\n\n  private emitToServer(event: TanStackDevtoolsEvent<string, any>) {\n    const json = JSON.stringify(event)\n    // try to emit it to the event bus first\n    if (this.#socket && this.#socket.readyState === WebSocket.OPEN) {\n      this.debugLog('Emitting event to server via WS', event)\n      this.#socket.send(json)\n      // try to emit to SSE if WebSocket is not available (this will only happen on the client side)\n    } else if (this.#eventSource) {\n      this.debugLog('Emitting event to server via SSE', event)\n\n      fetch(`http://localhost:${this.#port}/__devtools/send`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: json,\n      }).catch(() => {})\n    }\n  }\n  start() {\n    this.debugLog('Starting client event bus')\n    if (typeof window === 'undefined') {\n      return\n    }\n    if (this.#connectToServerBus) {\n      this.connect()\n    }\n    this.#eventTarget = window\n    this.#eventTarget.addEventListener(\n      'tanstack-dispatch-event',\n      this.#dispatcher,\n    )\n    this.#eventTarget.addEventListener(\n      'tanstack-connect',\n      this.#connectFunction,\n    )\n  }\n  stop() {\n    this.debugLog('Stopping client event bus')\n    if (typeof window === 'undefined') {\n      return\n    }\n    this.#eventTarget.removeEventListener(\n      'tanstack-dispatch-event',\n      this.#dispatcher,\n    )\n    this.#eventTarget.removeEventListener(\n      'tanstack-connect',\n      this.#connectFunction,\n    )\n    this.#eventSource?.close()\n    this.#socket?.close()\n    this.#socket = null\n    this.#eventSource = null\n  }\n  private getGlobalTarget() {\n    if (typeof window !== 'undefined') {\n      return window\n    }\n\n    return new EventTarget()\n  }\n  private debugLog(...messages: Array<any>) {\n    if (this.#debug) {\n      console.log('ðŸŒ´ [tanstack-devtools:client-bus]', ...messages)\n    }\n  }\n  private connectSSE() {\n    this.debugLog('Connecting to SSE server')\n    this.#eventSource = new EventSource(\n      `http://localhost:${this.#port}/__devtools/sse`,\n    )\n    this.#eventSource.onmessage = (e) => {\n      this.debugLog('Received message from SSE server', e.data)\n      this.handleEventReceived(e.data)\n    }\n  }\n\n  private connectWebSocket() {\n    this.debugLog('Connecting to WebSocket server')\n\n    this.#socket = new WebSocket(`ws://localhost:${this.#port}/__devtools/ws`)\n    this.#socket.onmessage = (e) => {\n      this.debugLog('Received message from server', e.data)\n      this.handleEventReceived(e.data)\n    }\n    this.#socket.onclose = () => {\n      this.debugLog('WebSocket connection closed')\n      this.#socket = null\n    }\n    this.#socket.onerror = () => {\n      this.debugLog('WebSocket connection error')\n    }\n  }\n\n  private connect() {\n    try {\n      this.connectWebSocket()\n    } catch {\n      // Do not try to connect if we're on the server side\n      if (typeof window === 'undefined') return\n      this.connectSSE()\n    }\n  }\n\n  private handleEventReceived(data: string) {\n    try {\n      const event = JSON.parse(data) as TanStackDevtoolsEvent<string, any>\n      this.emitToClients(event)\n    } catch {}\n  }\n}\n"],"names":[],"mappings":"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"}