{"version":3,"file":"createStart.js","sources":["../../src/createStart.ts"],"sourcesContent":["import { createMiddleware } from './createMiddleware'\nimport type {\n  AnyFunctionMiddleware,\n  AnyRequestMiddleware,\n  CreateMiddlewareFn,\n} from './createMiddleware'\nimport type {\n  AnySerializationAdapter,\n  Register,\n  SSROption,\n} from '@tanstack/router-core'\n\nexport interface StartInstanceOptions<\n  in out TSerializationAdapters,\n  in out TDefaultSsr,\n  in out TRequestMiddlewares,\n  in out TFunctionMiddlewares,\n> {\n  '~types': StartInstanceTypes<\n    TSerializationAdapters,\n    TDefaultSsr,\n    TRequestMiddlewares,\n    TFunctionMiddlewares\n  >\n  serializationAdapters?: TSerializationAdapters\n  defaultSsr?: TDefaultSsr\n  requestMiddleware?: TRequestMiddlewares\n  functionMiddleware?: TFunctionMiddlewares\n}\n\nexport interface StartInstance<\n  in out TSerializationAdapters,\n  in out TDefaultSsr,\n  in out TRequestMiddlewares,\n  in out TFunctionMiddlewares,\n> {\n  getOptions: () =>\n    | Promise<\n        StartInstanceOptions<\n          TSerializationAdapters,\n          TDefaultSsr,\n          TRequestMiddlewares,\n          TFunctionMiddlewares\n        >\n      >\n    | StartInstanceOptions<\n        TSerializationAdapters,\n        TDefaultSsr,\n        TRequestMiddlewares,\n        TFunctionMiddlewares\n      >\n  createMiddleware: CreateMiddlewareFn<Register>\n}\n\nexport interface StartInstanceTypes<\n  in out TSerializationAdapters,\n  in out TDefaultSsr,\n  in out TRequestMiddlewares,\n  in out TFunctionMiddlewares,\n> {\n  serializationAdapters: TSerializationAdapters\n  defaultSsr: TDefaultSsr\n  requestMiddleware: TRequestMiddlewares\n  functionMiddleware: TFunctionMiddlewares\n}\n\nexport const createStart = <\n  const TSerializationAdapters extends\n    ReadonlyArray<AnySerializationAdapter> = [],\n  TDefaultSsr extends SSROption = SSROption,\n  const TRequestMiddlewares extends ReadonlyArray<AnyRequestMiddleware> = [],\n  const TFunctionMiddlewares extends ReadonlyArray<AnyFunctionMiddleware> = [],\n>(\n  getOptions: () =>\n    | Promise<\n        Omit<\n          StartInstanceOptions<\n            TSerializationAdapters,\n            TDefaultSsr,\n            TRequestMiddlewares,\n            TFunctionMiddlewares\n          >,\n          '~types'\n        >\n      >\n    | Omit<\n        StartInstanceOptions<\n          TSerializationAdapters,\n          TDefaultSsr,\n          TRequestMiddlewares,\n          TFunctionMiddlewares\n        >,\n        '~types'\n      >,\n): StartInstance<\n  TSerializationAdapters,\n  TDefaultSsr,\n  TRequestMiddlewares,\n  TFunctionMiddlewares\n> => {\n  return {\n    getOptions: async () => {\n      const options = await getOptions()\n      return options\n    },\n    createMiddleware: createMiddleware as any,\n  } as StartInstance<\n    TSerializationAdapters,\n    TDefaultSsr,\n    TRequestMiddlewares,\n    TFunctionMiddlewares\n  >\n}\n\nexport type AnyStartInstance = StartInstance<any, any, any, any>\nexport type AnyStartInstanceOptions = StartInstanceOptions<any, any, any, any>\n\ndeclare module '@tanstack/router-core' {\n  interface Register {\n    ssr: true\n  }\n}\n"],"names":[],"mappings":";AAkEO,MAAM,cAAc,CAOzB,eA0BG;AACH,SAAO;AAAA,IACL,YAAY,YAAY;AACtB,YAAM,UAAU,MAAM,WAAA;AACtB,aAAO;AAAA,IACT;AAAA,IACA;AAAA,EAAA;AAOJ;"}