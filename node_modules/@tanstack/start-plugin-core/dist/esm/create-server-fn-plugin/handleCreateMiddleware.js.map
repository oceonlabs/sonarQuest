{"version":3,"file":"handleCreateMiddleware.js","sources":["../../../src/create-server-fn-plugin/handleCreateMiddleware.ts"],"sourcesContent":["import * as t from '@babel/types'\nimport { getRootCallExpression } from '../start-compiler-plugin/utils'\nimport type * as babel from '@babel/core'\n\nexport function handleCreateMiddleware(\n  path: babel.NodePath<t.CallExpression>,\n  opts: {\n    env: 'client' | 'server'\n  },\n) {\n  const rootCallExpression = getRootCallExpression(path)\n\n  // if (debug)\n  //   console.info(\n  //     'Handling createMiddleware call expression:',\n  //     rootCallExpression.toString(),\n  //   )\n\n  const callExpressionPaths = {\n    middleware: null as babel.NodePath<t.CallExpression> | null,\n    inputValidator: null as babel.NodePath<t.CallExpression> | null,\n    client: null as babel.NodePath<t.CallExpression> | null,\n    server: null as babel.NodePath<t.CallExpression> | null,\n  }\n\n  const validMethods = Object.keys(callExpressionPaths)\n\n  rootCallExpression.traverse({\n    MemberExpression(memberExpressionPath) {\n      if (t.isIdentifier(memberExpressionPath.node.property)) {\n        const name = memberExpressionPath.node.property\n          .name as keyof typeof callExpressionPaths\n\n        if (\n          validMethods.includes(name) &&\n          memberExpressionPath.parentPath.isCallExpression()\n        ) {\n          callExpressionPaths[name] = memberExpressionPath.parentPath\n        }\n      }\n    },\n  })\n\n  if (callExpressionPaths.inputValidator) {\n    const innerInputExpression =\n      callExpressionPaths.inputValidator.node.arguments[0]\n\n    if (!innerInputExpression) {\n      throw new Error(\n        'createMiddleware().inputValidator() must be called with a validator!',\n      )\n    }\n\n    // If we're on the client, remove the validator call expression\n    if (opts.env === 'client') {\n      if (\n        t.isMemberExpression(callExpressionPaths.inputValidator.node.callee)\n      ) {\n        callExpressionPaths.inputValidator.replaceWith(\n          callExpressionPaths.inputValidator.node.callee.object,\n        )\n      }\n    }\n  }\n\n  const serverFnPath = callExpressionPaths.server?.get(\n    'arguments.0',\n  ) as babel.NodePath<any>\n\n  if (\n    callExpressionPaths.server &&\n    serverFnPath.node &&\n    opts.env === 'client'\n  ) {\n    // If we're on the client, remove the server call expression\n    if (t.isMemberExpression(callExpressionPaths.server.node.callee)) {\n      callExpressionPaths.server.replaceWith(\n        callExpressionPaths.server.node.callee.object,\n      )\n    }\n  }\n}\n"],"names":[],"mappings":";;AAIO,SAAS,uBACd,MACA,MAGA;AACA,QAAM,qBAAqB,sBAAsB,IAAI;AAQrD,QAAM,sBAAsB;AAAA,IAC1B,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,QAAQ;AAAA,IACR,QAAQ;AAAA,EAAA;AAGV,QAAM,eAAe,OAAO,KAAK,mBAAmB;AAEpD,qBAAmB,SAAS;AAAA,IAC1B,iBAAiB,sBAAsB;AACrC,UAAI,EAAE,aAAa,qBAAqB,KAAK,QAAQ,GAAG;AACtD,cAAM,OAAO,qBAAqB,KAAK,SACpC;AAEH,YACE,aAAa,SAAS,IAAI,KAC1B,qBAAqB,WAAW,oBAChC;AACA,8BAAoB,IAAI,IAAI,qBAAqB;AAAA,QACnD;AAAA,MACF;AAAA,IACF;AAAA,EAAA,CACD;AAED,MAAI,oBAAoB,gBAAgB;AACtC,UAAM,uBACJ,oBAAoB,eAAe,KAAK,UAAU,CAAC;AAErD,QAAI,CAAC,sBAAsB;AACzB,YAAM,IAAI;AAAA,QACR;AAAA,MAAA;AAAA,IAEJ;AAGA,QAAI,KAAK,QAAQ,UAAU;AACzB,UACE,EAAE,mBAAmB,oBAAoB,eAAe,KAAK,MAAM,GACnE;AACA,4BAAoB,eAAe;AAAA,UACjC,oBAAoB,eAAe,KAAK,OAAO;AAAA,QAAA;AAAA,MAEnD;AAAA,IACF;AAAA,EACF;AAEA,QAAM,eAAe,oBAAoB,QAAQ;AAAA,IAC/C;AAAA,EAAA;AAGF,MACE,oBAAoB,UACpB,aAAa,QACb,KAAK,QAAQ,UACb;AAEA,QAAI,EAAE,mBAAmB,oBAAoB,OAAO,KAAK,MAAM,GAAG;AAChE,0BAAoB,OAAO;AAAA,QACzB,oBAAoB,OAAO,KAAK,OAAO;AAAA,MAAA;AAAA,IAE3C;AAAA,EACF;AACF;"}