import { VITE_ENVIRONMENT_NAMES } from "../constants.js";
import { ServerFnCompiler } from "./compiler.js";
function cleanId(id) {
  return id.split("?")[0];
}
const LookupKindsPerEnv = {
  client: /* @__PURE__ */ new Set(["Middleware", "ServerFn"]),
  server: /* @__PURE__ */ new Set(["ServerFn"])
};
const getLookupConfigurationsForEnv = (env, framework) => {
  const createServerFnConfig = {
    libName: `@tanstack/${framework}-start`,
    rootExport: "createServerFn"
  };
  if (env === "client") {
    return [
      {
        libName: `@tanstack/${framework}-start`,
        rootExport: "createMiddleware"
      },
      {
        libName: `@tanstack/${framework}-start`,
        rootExport: "createStart"
      },
      createServerFnConfig
    ];
  } else {
    return [createServerFnConfig];
  }
};
function createServerFnPlugin(framework) {
  const SERVER_FN_LOOKUP = "server-fn-module-lookup";
  const compilers = {};
  return [
    {
      name: "tanstack-start-core:capture-server-fn-module-lookup",
      // we only need this plugin in dev mode
      apply: "serve",
      applyToEnvironment(env) {
        return [
          VITE_ENVIRONMENT_NAMES.client,
          VITE_ENVIRONMENT_NAMES.server
        ].includes(env.name);
      },
      transform: {
        filter: {
          id: new RegExp(`${SERVER_FN_LOOKUP}$`)
        },
        handler(code, id) {
          const compiler = compilers[this.environment.name];
          compiler?.ingestModule({ code, id: cleanId(id) });
        }
      }
    },
    {
      name: "tanstack-start-core::server-fn",
      enforce: "pre",
      applyToEnvironment(env) {
        return [
          VITE_ENVIRONMENT_NAMES.client,
          VITE_ENVIRONMENT_NAMES.server
        ].includes(env.name);
      },
      transform: {
        filter: {
          id: {
            exclude: new RegExp(`${SERVER_FN_LOOKUP}$`)
          },
          code: {
            // TODO apply this plugin with a different filter per environment so that .createMiddleware() calls are not scanned in server env
            // only scan files that mention `.handler(` | `.createMiddleware()`
            include: [/\.handler\(/, /.createMiddleware\(\)/]
          }
        },
        async handler(code, id) {
          let compiler = compilers[this.environment.name];
          if (!compiler) {
            const env = this.environment.name === VITE_ENVIRONMENT_NAMES.client ? "client" : this.environment.name === VITE_ENVIRONMENT_NAMES.server ? "server" : (() => {
              throw new Error(
                `Environment ${this.environment.name} not configured`
              );
            })();
            compiler = new ServerFnCompiler({
              env,
              lookupKinds: LookupKindsPerEnv[env],
              lookupConfigurations: getLookupConfigurationsForEnv(
                env,
                framework
              ),
              loadModule: async (id2) => {
                if (this.environment.mode === "build") {
                  const loaded = await this.load({ id: id2 });
                  if (!loaded.code) {
                    throw new Error(`could not load module ${id2}`);
                  }
                  compiler.ingestModule({ code: loaded.code, id: id2 });
                } else if (this.environment.mode === "dev") {
                  await this.environment.fetchModule(
                    id2 + "?" + SERVER_FN_LOOKUP
                  );
                } else {
                  throw new Error(
                    `could not load module ${id2}: unknown environment mode ${this.environment.mode}`
                  );
                }
              },
              resolveId: async (source, importer) => {
                const r = await this.resolve(source, importer);
                if (r) {
                  if (!r.external) {
                    return cleanId(r.id);
                  }
                }
                return null;
              }
            });
            compilers[this.environment.name] = compiler;
          }
          id = cleanId(id);
          const result = await compiler.compile({ id, code });
          return result;
        }
      },
      hotUpdate(ctx) {
        const compiler = compilers[this.environment.name];
        ctx.modules.forEach((m) => {
          if (m.id) {
            const deleted = compiler?.invalidateModule(m.id);
            if (deleted) {
              m.importers.forEach((importer) => {
                if (importer.id) {
                  compiler?.invalidateModule(importer.id);
                }
              });
            }
          }
        });
      }
    }
  ];
}
export {
  createServerFnPlugin
};
//# sourceMappingURL=plugin.js.map
