{"version":3,"file":"plugin.js","sources":["../../../src/create-server-fn-plugin/plugin.ts"],"sourcesContent":["import { VITE_ENVIRONMENT_NAMES } from '../constants'\nimport { ServerFnCompiler } from './compiler'\nimport type { LookupConfig, LookupKind } from './compiler'\nimport type { CompileStartFrameworkOptions } from '../start-compiler-plugin/compilers'\nimport type { ViteEnvironmentNames } from '../constants'\nimport type { PluginOption } from 'vite'\n\nfunction cleanId(id: string): string {\n  return id.split('?')[0]!\n}\n\nconst LookupKindsPerEnv: Record<'client' | 'server', Set<LookupKind>> = {\n  client: new Set(['Middleware', 'ServerFn'] as const),\n  server: new Set(['ServerFn'] as const),\n}\n\nconst getLookupConfigurationsForEnv = (\n  env: 'client' | 'server',\n  framework: CompileStartFrameworkOptions,\n): Array<LookupConfig> => {\n  const createServerFnConfig: LookupConfig = {\n    libName: `@tanstack/${framework}-start`,\n    rootExport: 'createServerFn',\n  }\n  if (env === 'client') {\n    return [\n      {\n        libName: `@tanstack/${framework}-start`,\n        rootExport: 'createMiddleware',\n      },\n      {\n        libName: `@tanstack/${framework}-start`,\n        rootExport: 'createStart',\n      },\n\n      createServerFnConfig,\n    ]\n  } else {\n    return [createServerFnConfig]\n  }\n}\nexport function createServerFnPlugin(\n  framework: CompileStartFrameworkOptions,\n): PluginOption {\n  const SERVER_FN_LOOKUP = 'server-fn-module-lookup'\n\n  const compilers: Partial<Record<ViteEnvironmentNames, ServerFnCompiler>> = {}\n  return [\n    {\n      name: 'tanstack-start-core:capture-server-fn-module-lookup',\n      // we only need this plugin in dev mode\n      apply: 'serve',\n      applyToEnvironment(env) {\n        return [\n          VITE_ENVIRONMENT_NAMES.client,\n          VITE_ENVIRONMENT_NAMES.server,\n        ].includes(env.name as ViteEnvironmentNames)\n      },\n      transform: {\n        filter: {\n          id: new RegExp(`${SERVER_FN_LOOKUP}$`),\n        },\n        handler(code, id) {\n          const compiler =\n            compilers[this.environment.name as ViteEnvironmentNames]\n          compiler?.ingestModule({ code, id: cleanId(id) })\n        },\n      },\n    },\n    {\n      name: 'tanstack-start-core::server-fn',\n      enforce: 'pre',\n\n      applyToEnvironment(env) {\n        return [\n          VITE_ENVIRONMENT_NAMES.client,\n          VITE_ENVIRONMENT_NAMES.server,\n        ].includes(env.name as ViteEnvironmentNames)\n      },\n      transform: {\n        filter: {\n          id: {\n            exclude: new RegExp(`${SERVER_FN_LOOKUP}$`),\n          },\n          code: {\n            // TODO apply this plugin with a different filter per environment so that .createMiddleware() calls are not scanned in server env\n            // only scan files that mention `.handler(` | `.createMiddleware()`\n            include: [/\\.handler\\(/, /.createMiddleware\\(\\)/],\n          },\n        },\n        async handler(code, id) {\n          let compiler =\n            compilers[this.environment.name as ViteEnvironmentNames]\n          if (!compiler) {\n            const env =\n              this.environment.name === VITE_ENVIRONMENT_NAMES.client\n                ? 'client'\n                : this.environment.name === VITE_ENVIRONMENT_NAMES.server\n                  ? 'server'\n                  : (() => {\n                      throw new Error(\n                        `Environment ${this.environment.name} not configured`,\n                      )\n                    })()\n\n            compiler = new ServerFnCompiler({\n              env,\n              lookupKinds: LookupKindsPerEnv[env],\n              lookupConfigurations: getLookupConfigurationsForEnv(\n                env,\n                framework,\n              ),\n              loadModule: async (id: string) => {\n                if (this.environment.mode === 'build') {\n                  const loaded = await this.load({ id })\n                  if (!loaded.code) {\n                    throw new Error(`could not load module ${id}`)\n                  }\n                  compiler!.ingestModule({ code: loaded.code, id })\n                } else if (this.environment.mode === 'dev') {\n                  /**\n                   * in dev, vite does not return code from `ctx.load()`\n                   * so instead, we need to take a different approach\n                   * we must force vite to load the module and run it through the vite plugin pipeline\n                   * we can do this by using the `fetchModule` method\n                   * the `captureServerFnModuleLookupPlugin` captures the module code via its transform hook and invokes analyzeModuleAST\n                   */\n                  await this.environment.fetchModule(\n                    id + '?' + SERVER_FN_LOOKUP,\n                  )\n                } else {\n                  throw new Error(\n                    `could not load module ${id}: unknown environment mode ${this.environment.mode}`,\n                  )\n                }\n              },\n              resolveId: async (source: string, importer?: string) => {\n                const r = await this.resolve(source, importer)\n                if (r) {\n                  if (!r.external) {\n                    return cleanId(r.id)\n                  }\n                }\n                return null\n              },\n            })\n            compilers[this.environment.name as ViteEnvironmentNames] = compiler\n          }\n\n          id = cleanId(id)\n          const result = await compiler.compile({ id, code })\n          return result\n        },\n      },\n\n      hotUpdate(ctx) {\n        const compiler =\n          compilers[this.environment.name as ViteEnvironmentNames]\n\n        ctx.modules.forEach((m) => {\n          if (m.id) {\n            const deleted = compiler?.invalidateModule(m.id)\n            if (deleted) {\n              m.importers.forEach((importer) => {\n                if (importer.id) {\n                  compiler?.invalidateModule(importer.id)\n                }\n              })\n            }\n          }\n        })\n      },\n    },\n  ]\n}\n"],"names":["id"],"mappings":";;AAOA,SAAS,QAAQ,IAAoB;AACnC,SAAO,GAAG,MAAM,GAAG,EAAE,CAAC;AACxB;AAEA,MAAM,oBAAkE;AAAA,EACtE,QAAQ,oBAAI,IAAI,CAAC,cAAc,UAAU,CAAU;AAAA,EACnD,QAAQ,oBAAI,IAAI,CAAC,UAAU,CAAU;AACvC;AAEA,MAAM,gCAAgC,CACpC,KACA,cACwB;AACxB,QAAM,uBAAqC;AAAA,IACzC,SAAS,aAAa,SAAS;AAAA,IAC/B,YAAY;AAAA,EAAA;AAEd,MAAI,QAAQ,UAAU;AACpB,WAAO;AAAA,MACL;AAAA,QACE,SAAS,aAAa,SAAS;AAAA,QAC/B,YAAY;AAAA,MAAA;AAAA,MAEd;AAAA,QACE,SAAS,aAAa,SAAS;AAAA,QAC/B,YAAY;AAAA,MAAA;AAAA,MAGd;AAAA,IAAA;AAAA,EAEJ,OAAO;AACL,WAAO,CAAC,oBAAoB;AAAA,EAC9B;AACF;AACO,SAAS,qBACd,WACc;AACd,QAAM,mBAAmB;AAEzB,QAAM,YAAqE,CAAA;AAC3E,SAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA;AAAA,MAEN,OAAO;AAAA,MACP,mBAAmB,KAAK;AACtB,eAAO;AAAA,UACL,uBAAuB;AAAA,UACvB,uBAAuB;AAAA,QAAA,EACvB,SAAS,IAAI,IAA4B;AAAA,MAC7C;AAAA,MACA,WAAW;AAAA,QACT,QAAQ;AAAA,UACN,IAAI,IAAI,OAAO,GAAG,gBAAgB,GAAG;AAAA,QAAA;AAAA,QAEvC,QAAQ,MAAM,IAAI;AAChB,gBAAM,WACJ,UAAU,KAAK,YAAY,IAA4B;AACzD,oBAAU,aAAa,EAAE,MAAM,IAAI,QAAQ,EAAE,GAAG;AAAA,QAClD;AAAA,MAAA;AAAA,IACF;AAAA,IAEF;AAAA,MACE,MAAM;AAAA,MACN,SAAS;AAAA,MAET,mBAAmB,KAAK;AACtB,eAAO;AAAA,UACL,uBAAuB;AAAA,UACvB,uBAAuB;AAAA,QAAA,EACvB,SAAS,IAAI,IAA4B;AAAA,MAC7C;AAAA,MACA,WAAW;AAAA,QACT,QAAQ;AAAA,UACN,IAAI;AAAA,YACF,SAAS,IAAI,OAAO,GAAG,gBAAgB,GAAG;AAAA,UAAA;AAAA,UAE5C,MAAM;AAAA;AAAA;AAAA,YAGJ,SAAS,CAAC,eAAe,uBAAuB;AAAA,UAAA;AAAA,QAClD;AAAA,QAEF,MAAM,QAAQ,MAAM,IAAI;AACtB,cAAI,WACF,UAAU,KAAK,YAAY,IAA4B;AACzD,cAAI,CAAC,UAAU;AACb,kBAAM,MACJ,KAAK,YAAY,SAAS,uBAAuB,SAC7C,WACA,KAAK,YAAY,SAAS,uBAAuB,SAC/C,YACC,MAAM;AACL,oBAAM,IAAI;AAAA,gBACR,eAAe,KAAK,YAAY,IAAI;AAAA,cAAA;AAAA,YAExC,GAAA;AAER,uBAAW,IAAI,iBAAiB;AAAA,cAC9B;AAAA,cACA,aAAa,kBAAkB,GAAG;AAAA,cAClC,sBAAsB;AAAA,gBACpB;AAAA,gBACA;AAAA,cAAA;AAAA,cAEF,YAAY,OAAOA,QAAe;AAChC,oBAAI,KAAK,YAAY,SAAS,SAAS;AACrC,wBAAM,SAAS,MAAM,KAAK,KAAK,EAAE,IAAAA,KAAI;AACrC,sBAAI,CAAC,OAAO,MAAM;AAChB,0BAAM,IAAI,MAAM,yBAAyBA,GAAE,EAAE;AAAA,kBAC/C;AACA,2BAAU,aAAa,EAAE,MAAM,OAAO,MAAM,IAAAA,KAAI;AAAA,gBAClD,WAAW,KAAK,YAAY,SAAS,OAAO;AAQ1C,wBAAM,KAAK,YAAY;AAAA,oBACrBA,MAAK,MAAM;AAAA,kBAAA;AAAA,gBAEf,OAAO;AACL,wBAAM,IAAI;AAAA,oBACR,yBAAyBA,GAAE,8BAA8B,KAAK,YAAY,IAAI;AAAA,kBAAA;AAAA,gBAElF;AAAA,cACF;AAAA,cACA,WAAW,OAAO,QAAgB,aAAsB;AACtD,sBAAM,IAAI,MAAM,KAAK,QAAQ,QAAQ,QAAQ;AAC7C,oBAAI,GAAG;AACL,sBAAI,CAAC,EAAE,UAAU;AACf,2BAAO,QAAQ,EAAE,EAAE;AAAA,kBACrB;AAAA,gBACF;AACA,uBAAO;AAAA,cACT;AAAA,YAAA,CACD;AACD,sBAAU,KAAK,YAAY,IAA4B,IAAI;AAAA,UAC7D;AAEA,eAAK,QAAQ,EAAE;AACf,gBAAM,SAAS,MAAM,SAAS,QAAQ,EAAE,IAAI,MAAM;AAClD,iBAAO;AAAA,QACT;AAAA,MAAA;AAAA,MAGF,UAAU,KAAK;AACb,cAAM,WACJ,UAAU,KAAK,YAAY,IAA4B;AAEzD,YAAI,QAAQ,QAAQ,CAAC,MAAM;AACzB,cAAI,EAAE,IAAI;AACR,kBAAM,UAAU,UAAU,iBAAiB,EAAE,EAAE;AAC/C,gBAAI,SAAS;AACX,gBAAE,UAAU,QAAQ,CAAC,aAAa;AAChC,oBAAI,SAAS,IAAI;AACf,4BAAU,iBAAiB,SAAS,EAAE;AAAA,gBACxC;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IAAA;AAAA,EACF;AAEJ;"}