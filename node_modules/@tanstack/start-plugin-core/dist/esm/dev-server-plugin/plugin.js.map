{"version":3,"file":"plugin.js","sources":["../../../src/dev-server-plugin/plugin.ts"],"sourcesContent":["import { isRunnableDevEnvironment } from 'vite'\nimport { VIRTUAL_MODULES } from '@tanstack/start-server-core'\nimport { NodeRequest, sendNodeResponse } from 'srvx/node'\nimport { ENTRY_POINTS, VITE_ENVIRONMENT_NAMES } from '../constants'\nimport { resolveViteId } from '../utils'\nimport { extractHtmlScripts } from './extract-html-scripts'\nimport type { Connect, DevEnvironment, PluginOption } from 'vite'\nimport type { TanStackStartOutputConfig } from '../schema'\n\nexport function devServerPlugin({\n  getConfig,\n}: {\n  getConfig: () => { startConfig: TanStackStartOutputConfig }\n}): PluginOption {\n  let isTest = false\n\n  let injectedHeadScripts: string | undefined\n\n  return [\n    {\n      name: 'tanstack-start-core:dev-server',\n      config(_userConfig, { mode }) {\n        isTest = isTest ? isTest : mode === 'test'\n      },\n      async configureServer(viteDevServer) {\n        if (isTest) {\n          return\n        }\n\n        // Extract the scripts that Vite plugins would inject into the initial HTML\n        const templateHtml = `<html><head></head><body></body></html>`\n        const transformedHtml = await viteDevServer.transformIndexHtml(\n          '/',\n          templateHtml,\n        )\n        const scripts = extractHtmlScripts(transformedHtml)\n        injectedHeadScripts = scripts\n          .flatMap((script) => script.content ?? [])\n          .join(';')\n\n        return () => {\n          const serverEnv = viteDevServer.environments[\n            VITE_ENVIRONMENT_NAMES.server\n          ] as DevEnvironment | undefined\n\n          if (!serverEnv) {\n            throw new Error(\n              `Server environment ${VITE_ENVIRONMENT_NAMES.server} not found`,\n            )\n          }\n          const { startConfig } = getConfig()\n          const installMiddleware = startConfig.vite?.installDevServerMiddleware\n          if (installMiddleware === false) {\n            return\n          }\n          if (installMiddleware == undefined) {\n            // do not install middleware in middlewareMode by default\n            if (viteDevServer.config.server.middlewareMode) {\n              return\n            }\n\n            // do not install middleware if SSR env in case another plugin already did\n            if (\n              !isRunnableDevEnvironment(serverEnv) ||\n              // do not check via `isFetchableDevEnvironment` since nitro does implement the `FetchableDevEnvironment` interface but not via inheritance (which this helper checks)\n              'dispatchFetch' in serverEnv\n            ) {\n              return\n            }\n          }\n\n          if (!isRunnableDevEnvironment(serverEnv)) {\n            throw new Error(\n              'cannot install vite dev server middleware for TanStack Start since the SSR environment is not a RunnableDevEnvironment',\n            )\n          }\n\n          viteDevServer.middlewares.use(async (req, res) => {\n            // fix the request URL to match the original URL\n            // otherwise, the request URL will '/index.html'\n            if (req.originalUrl) {\n              req.url = req.originalUrl\n            }\n            const webReq = new NodeRequest({ req, res })\n\n            try {\n              // Import and resolve the request by running the server request entry point\n              // this request entry point must implement the `fetch` API as follows:\n              /**\n               * export default {\n               *  fetch(req: Request): Promise<Response>\n               * }\n               */\n              const serverEntry = await serverEnv.runner.import(\n                ENTRY_POINTS.server,\n              )\n              const webRes = await serverEntry['default'].fetch(webReq)\n\n              return sendNodeResponse(res, webRes)\n            } catch (e) {\n              console.error(e)\n              try {\n                viteDevServer.ssrFixStacktrace(e as Error)\n              } catch (_e) {}\n\n              if (\n                webReq.headers.get('content-type')?.includes('application/json')\n              ) {\n                return sendNodeResponse(\n                  res,\n                  new Response(\n                    JSON.stringify(\n                      {\n                        status: 500,\n                        error: 'Internal Server Error',\n                        message:\n                          'An unexpected error occurred. Please try again later.',\n                        timestamp: new Date().toISOString(),\n                      },\n                      null,\n                      2,\n                    ),\n                    {\n                      status: 500,\n                      headers: {\n                        'Content-Type': 'application/json',\n                      },\n                    },\n                  ),\n                )\n              }\n\n              return sendNodeResponse(\n                res,\n                new Response(\n                  `\n              <!DOCTYPE html>\n              <html lang=\"en\">\n                <head>\n                  <meta charset=\"UTF-8\" />\n                  <title>Error</title>\n                  <script type=\"module\">\n                    import { ErrorOverlay } from '/@vite/client'\n                    document.body.appendChild(new ErrorOverlay(${JSON.stringify(\n                      prepareError(req, e),\n                    ).replace(/</g, '\\\\u003c')}))\n                  </script>\n                </head>\n                <body>\n                </body>\n              </html>\n            `,\n                  {\n                    status: 500,\n                    headers: {\n                      'Content-Type': 'text/html',\n                    },\n                  },\n                ),\n              )\n            }\n          })\n        }\n      },\n    },\n    {\n      name: 'tanstack-start-core:dev-server:injected-head-scripts',\n      sharedDuringBuild: true,\n      applyToEnvironment: (env) => env.config.consumer === 'server',\n      resolveId: {\n        filter: { id: new RegExp(VIRTUAL_MODULES.injectedHeadScripts) },\n        handler(_id) {\n          return resolveViteId(VIRTUAL_MODULES.injectedHeadScripts)\n        },\n      },\n      load: {\n        filter: {\n          id: new RegExp(resolveViteId(VIRTUAL_MODULES.injectedHeadScripts)),\n        },\n        handler() {\n          const mod = `\n        export const injectedHeadScripts = ${JSON.stringify(injectedHeadScripts) || 'undefined'}`\n          return mod\n        },\n      },\n    },\n  ]\n}\n\n/**\n * Formats error for SSR message in error overlay\n * @param req\n * @param error\n * @returns\n */\nfunction prepareError(req: Connect.IncomingMessage, error: unknown) {\n  const e = error as Error\n  return {\n    message: `An error occurred while server rendering ${req.url}:\\n\\n\\t${\n      typeof e === 'string' ? e : e.message\n    } `,\n    stack: typeof e === 'string' ? '' : e.stack,\n  }\n}\n"],"names":[],"mappings":"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"}