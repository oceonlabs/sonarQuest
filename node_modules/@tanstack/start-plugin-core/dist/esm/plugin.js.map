{"version":3,"file":"plugin.js","sources":["../../src/plugin.ts"],"sourcesContent":["import { trimPathRight } from '@tanstack/router-core'\nimport { VIRTUAL_MODULES } from '@tanstack/start-server-core'\nimport { TanStackServerFnPluginEnv } from '@tanstack/server-functions-plugin'\nimport * as vite from 'vite'\nimport { crawlFrameworkPkgs } from 'vitefu'\nimport { join } from 'pathe'\nimport { escapePath } from 'tinyglobby'\nimport { startManifestPlugin } from './start-manifest-plugin/plugin'\nimport { startCompilerPlugin } from './start-compiler-plugin/plugin'\nimport { ENTRY_POINTS, VITE_ENVIRONMENT_NAMES } from './constants'\nimport { tanStackStartRouter } from './start-router-plugin/plugin'\nimport { loadEnvPlugin } from './load-env-plugin/plugin'\nimport { devServerPlugin } from './dev-server-plugin/plugin'\nimport { parseStartConfig } from './schema'\nimport { resolveEntry } from './resolve-entries'\nimport {\n  getClientOutputDirectory,\n  getServerOutputDirectory,\n} from './output-directory'\nimport { postServerBuild } from './post-server-build'\nimport { createServerFnPlugin } from './create-server-fn-plugin/plugin'\nimport type { ViteEnvironmentNames } from './constants'\nimport type {\n  TanStackStartInputConfig,\n  TanStackStartOutputConfig,\n} from './schema'\nimport type { PluginOption } from 'vite'\nimport type { CompileStartFrameworkOptions } from './start-compiler-plugin/compilers'\n\nexport interface TanStackStartVitePluginCoreOptions {\n  framework: CompileStartFrameworkOptions\n  defaultEntryPaths: {\n    client: string\n    server: string\n    start: string\n  }\n}\n\nexport interface ResolvedStartConfig {\n  root: string\n  startFilePath: string | undefined\n  routerFilePath: string\n  srcDirectory: string\n}\n\nexport type GetConfigFn = () => {\n  startConfig: TanStackStartOutputConfig\n  resolvedStartConfig: ResolvedStartConfig\n}\nexport function TanStackStartVitePluginCore(\n  corePluginOpts: TanStackStartVitePluginCoreOptions,\n  startPluginOpts: TanStackStartInputConfig,\n): Array<PluginOption> {\n  const resolvedStartConfig: ResolvedStartConfig = {\n    root: '',\n    startFilePath: undefined,\n    routerFilePath: '',\n    srcDirectory: '',\n  }\n\n  let startConfig: TanStackStartOutputConfig | null\n  const getConfig: GetConfigFn = () => {\n    if (!resolvedStartConfig.root) {\n      throw new Error(`Cannot get config before root is resolved`)\n    }\n    if (!startConfig) {\n      startConfig = parseStartConfig(\n        startPluginOpts,\n        corePluginOpts,\n        resolvedStartConfig.root,\n      )\n    }\n    return { startConfig, resolvedStartConfig }\n  }\n\n  const capturedBundle: Partial<\n    Record<ViteEnvironmentNames, vite.Rollup.OutputBundle>\n  > = {}\n\n  function getBundle(envName: ViteEnvironmentNames): vite.Rollup.OutputBundle {\n    const bundle = capturedBundle[envName]\n    if (!bundle) {\n      throw new Error(`No bundle captured for environment: ${envName}`)\n    }\n    return bundle\n  }\n\n  return [\n    {\n      name: 'tanstack-start-core:config',\n      enforce: 'pre',\n      async config(viteConfig, { command }) {\n        const viteAppBase = trimPathRight(viteConfig.base || '/')\n        globalThis.TSS_APP_BASE = viteAppBase\n\n        const root = viteConfig.root || process.cwd()\n        resolvedStartConfig.root = root\n\n        const { startConfig } = getConfig()\n        const resolvedSrcDirectory = join(root, startConfig.srcDirectory)\n        resolvedStartConfig.srcDirectory = resolvedSrcDirectory\n\n        const startFilePath = resolveEntry({\n          type: 'start entry',\n          configuredEntry: startConfig.start.entry,\n          defaultEntry: 'start',\n          resolvedSrcDirectory,\n          required: false,\n        })\n        resolvedStartConfig.startFilePath = startFilePath\n\n        const routerFilePath = resolveEntry({\n          type: 'router entry',\n          configuredEntry: startConfig.router.entry,\n          defaultEntry: 'router',\n          resolvedSrcDirectory,\n          required: true,\n        })\n        resolvedStartConfig.routerFilePath = routerFilePath\n\n        const clientEntryPath = resolveEntry({\n          type: 'client entry',\n          configuredEntry: startConfig.client.entry,\n          defaultEntry: 'client',\n          resolvedSrcDirectory,\n          required: false,\n        })\n\n        const serverEntryPath = resolveEntry({\n          type: 'server entry',\n          configuredEntry: startConfig.server.entry,\n          defaultEntry: 'server',\n          resolvedSrcDirectory,\n          required: false,\n        })\n\n        const clientAlias = vite.normalizePath(\n          clientEntryPath ?? corePluginOpts.defaultEntryPaths.client,\n        )\n        const serverAlias = vite.normalizePath(\n          serverEntryPath ?? corePluginOpts.defaultEntryPaths.server,\n        )\n        const startAlias = vite.normalizePath(\n          startFilePath ?? corePluginOpts.defaultEntryPaths.start,\n        )\n        const routerAlias = vite.normalizePath(routerFilePath)\n\n        const entryAliasConfiguration: Record<\n          (typeof ENTRY_POINTS)[keyof typeof ENTRY_POINTS],\n          string\n        > = {\n          [ENTRY_POINTS.client]: clientAlias,\n          [ENTRY_POINTS.server]: serverAlias,\n          [ENTRY_POINTS.start]: startAlias,\n          [ENTRY_POINTS.router]: routerAlias,\n        }\n\n        const startPackageName =\n          `@tanstack/${corePluginOpts.framework}-start` as const\n\n        // crawl packages that have start in \"peerDependencies\"\n        // see https://github.com/svitejs/vitefu/blob/d8d82fa121e3b2215ba437107093c77bde51b63b/src/index.js#L95-L101\n\n        // this is currently uncached; could be implemented similarly as vite handles lock file changes\n        // see https://github.com/vitejs/vite/blob/557f797d29422027e8c451ca50dd84bf8c41b5f0/packages/vite/src/node/optimizer/index.ts#L1282\n\n        const crawlFrameworkPkgsResult = await crawlFrameworkPkgs({\n          root: process.cwd(),\n          isBuild: command === 'build',\n          isFrameworkPkgByJson(pkgJson) {\n            const peerDependencies = pkgJson['peerDependencies']\n\n            if (peerDependencies) {\n              return startPackageName in peerDependencies\n            }\n\n            return false\n          },\n        })\n\n        return {\n          base: viteAppBase,\n          // see https://vite.dev/config/shared-options.html#apptype\n          // this will prevent vite from injecting middlewares that we don't want\n          appType: viteConfig.appType ?? 'custom',\n          environments: {\n            [VITE_ENVIRONMENT_NAMES.client]: {\n              consumer: 'client',\n              build: {\n                rollupOptions: {\n                  input: {\n                    main: ENTRY_POINTS.client,\n                  },\n                },\n                outDir: getClientOutputDirectory(viteConfig),\n              },\n              optimizeDeps: {\n                // Ensure user code can be crawled for dependencies\n                entries: [clientAlias, routerAlias].map((entry) =>\n                  // Entries are treated as `tinyglobby` patterns so need to be escaped\n                  escapePath(entry),\n                ),\n              },\n            },\n            [VITE_ENVIRONMENT_NAMES.server]: {\n              consumer: 'server',\n              build: {\n                ssr: true,\n                rollupOptions: {\n                  input:\n                    viteConfig.environments?.[VITE_ENVIRONMENT_NAMES.server]\n                      ?.build?.rollupOptions?.input ?? ENTRY_POINTS.server,\n                },\n                outDir: getServerOutputDirectory(viteConfig),\n                commonjsOptions: {\n                  include: [/node_modules/],\n                },\n                copyPublicDir:\n                  viteConfig.environments?.[VITE_ENVIRONMENT_NAMES.server]\n                    ?.build?.copyPublicDir ?? false,\n              },\n              optimizeDeps: {\n                // Ensure user code can be crawled for dependencies\n                entries: [serverAlias, startAlias, routerAlias].map((entry) =>\n                  // Entries are treated as `tinyglobby` patterns so need to be escaped\n                  escapePath(entry),\n                ),\n              },\n            },\n          },\n\n          resolve: {\n            noExternal: [\n              // ENTRY_POINTS.start,\n              '@tanstack/start**',\n              `@tanstack/${corePluginOpts.framework}-start**`,\n              ...crawlFrameworkPkgsResult.ssr.noExternal.sort(),\n            ],\n            alias: {\n              ...entryAliasConfiguration,\n            },\n          },\n          /* prettier-ignore */\n          define: {\n            // define is an esbuild function that replaces the any instances of given keys with the given values\n            // i.e: __FRAMEWORK_NAME__ can be replaced with JSON.stringify(\"TanStack Start\")\n            // This is not the same as injecting environment variables.\n\n            ...defineReplaceEnv('TSS_SERVER_FN_BASE', startConfig.serverFns.base),\n            ...defineReplaceEnv('TSS_CLIENT_OUTPUT_DIR', getClientOutputDirectory(viteConfig)),\n            ...defineReplaceEnv('TSS_APP_BASE', viteAppBase),\n            ...(command === 'serve' ? defineReplaceEnv('TSS_SHELL', startConfig.spa?.enabled ? 'true' : 'false') : {}),\n            ...defineReplaceEnv('TSS_DEV_SERVER', command === 'serve' ? 'true' : 'false'),\n          },\n          builder: {\n            sharedPlugins: true,\n            async buildApp(builder) {\n              const client = builder.environments[VITE_ENVIRONMENT_NAMES.client]\n              const server = builder.environments[VITE_ENVIRONMENT_NAMES.server]\n\n              if (!client) {\n                throw new Error('Client environment not found')\n              }\n\n              if (!server) {\n                throw new Error('SSR environment not found')\n              }\n\n              if (!client.isBuilt) {\n                // Build the client bundle first\n                await builder.build(client)\n              }\n              if (!server.isBuilt) {\n                // Build the SSR bundle\n                await builder.build(server)\n              }\n              const serverBundle = getBundle(VITE_ENVIRONMENT_NAMES.server)\n              await postServerBuild({ builder, startConfig, serverBundle })\n            },\n          },\n        }\n      },\n    },\n    tanStackStartRouter(startPluginOpts, getConfig, corePluginOpts),\n    // N.B. TanStackStartCompilerPlugin must be before the TanStackServerFnPluginEnv\n    startCompilerPlugin(corePluginOpts.framework),\n    createServerFnPlugin(corePluginOpts.framework),\n\n    TanStackServerFnPluginEnv({\n      // This is the ID that will be available to look up and import\n      // our server function manifest and resolve its module\n      manifestVirtualImportId: VIRTUAL_MODULES.serverFnManifest,\n      client: {\n        getRuntimeCode: () =>\n          `import { createClientRpc } from '@tanstack/${corePluginOpts.framework}-start/client'`,\n        replacer: (d) => `createClientRpc('${d.functionId}')`,\n        envName: VITE_ENVIRONMENT_NAMES.client,\n      },\n      server: {\n        getRuntimeCode: () =>\n          `import { createServerRpc } from '@tanstack/${corePluginOpts.framework}-start/server'`,\n        replacer: (d) => `createServerRpc('${d.functionId}', ${d.fn})`,\n        envName: VITE_ENVIRONMENT_NAMES.server,\n      },\n    }),\n    loadEnvPlugin(),\n    startManifestPlugin({\n      getClientBundle: () => getBundle(VITE_ENVIRONMENT_NAMES.client),\n    }),\n    devServerPlugin({ getConfig }),\n    {\n      name: 'tanstack-start:core:capture-bundle',\n      applyToEnvironment(e) {\n        return (\n          e.name === VITE_ENVIRONMENT_NAMES.client ||\n          e.name === VITE_ENVIRONMENT_NAMES.server\n        )\n      },\n      enforce: 'post',\n      generateBundle(_options, bundle) {\n        const environment = this.environment.name as ViteEnvironmentNames\n        if (!Object.values(VITE_ENVIRONMENT_NAMES).includes(environment)) {\n          throw new Error(`Unknown environment: ${environment}`)\n        }\n        capturedBundle[environment] = bundle\n      },\n    },\n  ]\n}\n\nfunction defineReplaceEnv<TKey extends string, TValue extends string>(\n  key: TKey,\n  value: TValue,\n): { [P in `process.env.${TKey}` | `import.meta.env.${TKey}`]: TValue } {\n  return {\n    [`process.env.${key}`]: JSON.stringify(value),\n    [`import.meta.env.${key}`]: JSON.stringify(value),\n  } as { [P in `process.env.${TKey}` | `import.meta.env.${TKey}`]: TValue }\n}\n"],"names":["startConfig"],"mappings":"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"}