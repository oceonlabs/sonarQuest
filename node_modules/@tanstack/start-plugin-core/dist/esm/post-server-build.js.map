{"version":3,"file":"post-server-build.js","sources":["../../src/post-server-build.ts"],"sourcesContent":["import { HEADERS } from '@tanstack/start-server-core'\nimport { buildSitemap } from './build-sitemap'\nimport { VITE_ENVIRONMENT_NAMES } from './constants'\nimport { prerender } from './prerender'\nimport type { TanStackStartOutputConfig } from './schema'\nimport type { Rollup, ViteBuilder } from 'vite'\n\nexport async function postServerBuild({\n  builder,\n  startConfig,\n  serverBundle,\n}: {\n  builder: ViteBuilder\n  startConfig: TanStackStartOutputConfig\n  serverBundle: Rollup.OutputBundle\n}) {\n  // If the user has not set a prerender option, we need to set it to true\n  // if the pages array is not empty and has sub options requiring for prerendering\n  // If the user has explicitly set prerender.enabled, this should be respected\n  if (startConfig.prerender?.enabled !== false) {\n    startConfig.prerender = {\n      ...startConfig.prerender,\n      enabled:\n        startConfig.prerender?.enabled ??\n        startConfig.pages.some((d) =>\n          typeof d === 'string' ? false : !!d.prerender?.enabled,\n        ),\n    }\n  }\n\n  // Setup the options for prerendering the SPA shell (i.e `src/routes/__root.tsx`)\n  if (startConfig.spa?.enabled) {\n    startConfig.prerender = {\n      ...startConfig.prerender,\n      enabled: true,\n    }\n\n    const maskUrl = new URL(startConfig.spa.maskPath, 'http://localhost')\n\n    startConfig.pages.push({\n      path: maskUrl.toString().replace('http://localhost', ''),\n      prerender: {\n        ...startConfig.spa.prerender,\n        headers: {\n          ...startConfig.spa.prerender.headers,\n          [HEADERS.TSS_SHELL]: 'true',\n        },\n      },\n      sitemap: {\n        exclude: true,\n      },\n    })\n  }\n\n  // Run the prerendering process\n  if (startConfig.prerender.enabled) {\n    await prerender({\n      startConfig,\n      builder,\n      serverBundle,\n    })\n  }\n\n  // Run the sitemap build process\n  if (startConfig.pages.length) {\n    buildSitemap({\n      startConfig,\n      publicDir:\n        builder.environments[VITE_ENVIRONMENT_NAMES.client]?.config.build\n          .outDir ?? builder.config.build.outDir,\n    })\n  }\n}\n"],"names":[],"mappings":";;;;AAOA,eAAsB,gBAAgB;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AACF,GAIG;AAID,MAAI,YAAY,WAAW,YAAY,OAAO;AAC5C,gBAAY,YAAY;AAAA,MACtB,GAAG,YAAY;AAAA,MACf,SACE,YAAY,WAAW,WACvB,YAAY,MAAM;AAAA,QAAK,CAAC,MACtB,OAAO,MAAM,WAAW,QAAQ,CAAC,CAAC,EAAE,WAAW;AAAA,MAAA;AAAA,IACjD;AAAA,EAEN;AAGA,MAAI,YAAY,KAAK,SAAS;AAC5B,gBAAY,YAAY;AAAA,MACtB,GAAG,YAAY;AAAA,MACf,SAAS;AAAA,IAAA;AAGX,UAAM,UAAU,IAAI,IAAI,YAAY,IAAI,UAAU,kBAAkB;AAEpE,gBAAY,MAAM,KAAK;AAAA,MACrB,MAAM,QAAQ,SAAA,EAAW,QAAQ,oBAAoB,EAAE;AAAA,MACvD,WAAW;AAAA,QACT,GAAG,YAAY,IAAI;AAAA,QACnB,SAAS;AAAA,UACP,GAAG,YAAY,IAAI,UAAU;AAAA,UAC7B,CAAC,QAAQ,SAAS,GAAG;AAAA,QAAA;AAAA,MACvB;AAAA,MAEF,SAAS;AAAA,QACP,SAAS;AAAA,MAAA;AAAA,IACX,CACD;AAAA,EACH;AAGA,MAAI,YAAY,UAAU,SAAS;AACjC,UAAM,UAAU;AAAA,MACd;AAAA,MACA;AAAA,MACA;AAAA,IAAA,CACD;AAAA,EACH;AAGA,MAAI,YAAY,MAAM,QAAQ;AAC5B,iBAAa;AAAA,MACX;AAAA,MACA,WACE,QAAQ,aAAa,uBAAuB,MAAM,GAAG,OAAO,MACzD,UAAU,QAAQ,OAAO,MAAM;AAAA,IAAA,CACrC;AAAA,EACH;AACF;"}