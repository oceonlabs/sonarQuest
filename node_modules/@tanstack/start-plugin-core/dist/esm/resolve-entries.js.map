{"version":3,"file":"resolve-entries.js","sources":["../../src/resolve-entries.ts"],"sourcesContent":["import { resolveModulePath } from 'exsolve'\n\ninterface ResolveModuleOptions {\n  baseName: string\n  from: string\n}\nfunction resolveModule(opts: ResolveModuleOptions): string | undefined {\n  let baseName = opts.baseName\n  if (!baseName.startsWith('./')) {\n    baseName = `./${baseName}`\n  }\n  return resolveModulePath(baseName, {\n    from: opts.from,\n    extensions: ['.ts', '.js', '.mts', '.mjs', '.tsx', '.jsx'],\n    try: true,\n  })\n}\n\nexport function resolveEntry<\n  TRequired extends boolean,\n  TReturn = TRequired extends true ? string : string | undefined,\n>(opts: {\n  type: string\n  configuredEntry?: string\n  defaultEntry: string\n  resolvedSrcDirectory: string\n  required: TRequired\n}): TReturn {\n  let resolveOptions: ResolveModuleOptions\n\n  // if entry was not configured, use default relative to srcDirectory\n  if (!opts.configuredEntry) {\n    resolveOptions = {\n      baseName: opts.defaultEntry,\n      from: opts.resolvedSrcDirectory,\n    }\n  } else {\n    resolveOptions = {\n      baseName: opts.configuredEntry,\n      from: opts.resolvedSrcDirectory,\n    }\n  }\n\n  const resolvedEntry = resolveModule(resolveOptions)\n  if (opts.required && !resolvedEntry) {\n    throw new Error(\n      `Could not resolve entry for ${opts.type}: ${resolveOptions.baseName} in ${resolveOptions.from}`,\n    )\n  }\n  return resolvedEntry as TReturn\n}\n"],"names":[],"mappings":";AAMA,SAAS,cAAc,MAAgD;AACrE,MAAI,WAAW,KAAK;AACpB,MAAI,CAAC,SAAS,WAAW,IAAI,GAAG;AAC9B,eAAW,KAAK,QAAQ;AAAA,EAC1B;AACA,SAAO,kBAAkB,UAAU;AAAA,IACjC,MAAM,KAAK;AAAA,IACX,YAAY,CAAC,OAAO,OAAO,QAAQ,QAAQ,QAAQ,MAAM;AAAA,IACzD,KAAK;AAAA,EAAA,CACN;AACH;AAEO,SAAS,aAGd,MAMU;AACV,MAAI;AAGJ,MAAI,CAAC,KAAK,iBAAiB;AACzB,qBAAiB;AAAA,MACf,UAAU,KAAK;AAAA,MACf,MAAM,KAAK;AAAA,IAAA;AAAA,EAEf,OAAO;AACL,qBAAiB;AAAA,MACf,UAAU,KAAK;AAAA,MACf,MAAM,KAAK;AAAA,IAAA;AAAA,EAEf;AAEA,QAAM,gBAAgB,cAAc,cAAc;AAClD,MAAI,KAAK,YAAY,CAAC,eAAe;AACnC,UAAM,IAAI;AAAA,MACR,+BAA+B,KAAK,IAAI,KAAK,eAAe,QAAQ,OAAO,eAAe,IAAI;AAAA,IAAA;AAAA,EAElG;AACA,SAAO;AACT;"}