{"version":3,"file":"plugin.js","sources":["../../../src/start-compiler-plugin/plugin.ts"],"sourcesContent":["import { fileURLToPath, pathToFileURL } from 'node:url'\nimport { createRequire } from 'node:module'\nimport { logDiff } from '@tanstack/router-utils'\n\nimport { VIRTUAL_MODULES } from '@tanstack/start-server-core'\nimport { normalizePath } from 'vite'\nimport path from 'pathe'\nimport { makeIdFiltersToMatchWithQuery } from '@rolldown/pluginutils'\nimport { VITE_ENVIRONMENT_NAMES } from '../constants'\nimport { compileStartOutputFactory } from './compilers'\nimport { transformFuncs } from './constants'\nimport type { ViteEnvironmentNames } from '../constants'\nimport type { Plugin } from 'vite'\nimport type { CompileStartFrameworkOptions } from './compilers'\n\nconst debug =\n  process.env.TSR_VITE_DEBUG &&\n  ['true', 'start-plugin'].includes(process.env.TSR_VITE_DEBUG)\n\nexport type TanStackStartViteOptions = {\n  globalMiddlewareEntry: string\n}\n\nconst tokenRegex = new RegExp(transformFuncs.join('|'))\n\nconst require = createRequire(import.meta.url)\n\nfunction resolveRuntimeFiles(opts: { package: string; files: Array<string> }) {\n  const pkgRoot = resolvePackage(opts.package)\n  const basePath = path.join(pkgRoot, 'dist', 'esm')\n  return opts.files.map((file) => normalizePath(path.join(basePath, file)))\n}\n\nfunction resolvePackage(packageName: string): string {\n  const pkgRoot = path.dirname(require.resolve(packageName + '/package.json'))\n  return pkgRoot\n}\n\nexport function startCompilerPlugin(\n  framework: CompileStartFrameworkOptions,\n): Plugin {\n  const compileStartOutput = compileStartOutputFactory(framework)\n\n  return {\n    name: 'tanstack-start-core:compiler',\n    enforce: 'pre',\n    applyToEnvironment(env) {\n      return [\n        VITE_ENVIRONMENT_NAMES.client,\n        VITE_ENVIRONMENT_NAMES.server,\n      ].includes(env.name as ViteEnvironmentNames)\n    },\n    transform: {\n      filter: {\n        code: tokenRegex,\n        id: {\n          exclude: [\n            VIRTUAL_MODULES.serverFnManifest,\n            // N.B. the following files either just re-export or provide the runtime implementation of those functions\n            // we do not want to include them in the transformation\n            // however, those packages (especially start-client-core ATM) also USE these functions\n            // (namely `createIsomorphicFn` in `packages/start-client-core/src/getRouterInstance.ts`) and thus need to be transformed\n            ...makeIdFiltersToMatchWithQuery([\n              ...resolveRuntimeFiles({\n                package: '@tanstack/start-client-core',\n                files: [\n                  'index.js',\n                  'createIsomorphicFn.js',\n                  'envOnly.js',\n                  'serverFnFetcher.js',\n                ],\n              }),\n              ...resolveRuntimeFiles({\n                package: '@tanstack/start-server-core',\n                files: ['index.js', 'server-functions-handler.js'],\n              }),\n              ...resolveRuntimeFiles({\n                package: `@tanstack/${framework}-start-client`,\n                files: ['index.js'],\n              }),\n            ]),\n          ],\n        },\n      },\n      handler(code, id) {\n        const env =\n          this.environment.name === VITE_ENVIRONMENT_NAMES.client\n            ? 'client'\n            : this.environment.name === VITE_ENVIRONMENT_NAMES.server\n              ? 'server'\n              : (() => {\n                  throw new Error(\n                    `Environment ${this.environment.name} not configured`,\n                  )\n                })()\n\n        const url = pathToFileURL(id)\n        url.searchParams.delete('v')\n        id = fileURLToPath(url).replace(/\\\\/g, '/')\n\n        if (debug) console.info(`${env} Compiling Start: `, id)\n\n        const compiled = compileStartOutput({\n          code,\n          filename: id,\n          env,\n        })\n\n        if (debug) {\n          logDiff(code, compiled.code)\n          console.log('Output:\\n', compiled.code + '\\n\\n')\n        }\n\n        return compiled\n      },\n    },\n  }\n}\n"],"names":["require"],"mappings":";;;;;;;;;;AAeA,MAAM,QACJ,QAAQ,IAAI,kBACZ,CAAC,QAAQ,cAAc,EAAE,SAAS,QAAQ,IAAI,cAAc;AAM9D,MAAM,aAAa,IAAI,OAAO,eAAe,KAAK,GAAG,CAAC;AAEtD,MAAMA,WAAU,cAAc,YAAY,GAAG;AAE7C,SAAS,oBAAoB,MAAiD;AAC5E,QAAM,UAAU,eAAe,KAAK,OAAO;AAC3C,QAAM,WAAW,KAAK,KAAK,SAAS,QAAQ,KAAK;AACjD,SAAO,KAAK,MAAM,IAAI,CAAC,SAAS,cAAc,KAAK,KAAK,UAAU,IAAI,CAAC,CAAC;AAC1E;AAEA,SAAS,eAAe,aAA6B;AACnD,QAAM,UAAU,KAAK,QAAQA,SAAQ,QAAQ,cAAc,eAAe,CAAC;AAC3E,SAAO;AACT;AAEO,SAAS,oBACd,WACQ;AACR,QAAM,qBAAqB,0BAA0B,SAAS;AAE9D,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,IACT,mBAAmB,KAAK;AACtB,aAAO;AAAA,QACL,uBAAuB;AAAA,QACvB,uBAAuB;AAAA,MAAA,EACvB,SAAS,IAAI,IAA4B;AAAA,IAC7C;AAAA,IACA,WAAW;AAAA,MACT,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,IAAI;AAAA,UACF,SAAS;AAAA,YACP,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,YAKhB,GAAG,8BAA8B;AAAA,cAC/B,GAAG,oBAAoB;AAAA,gBACrB,SAAS;AAAA,gBACT,OAAO;AAAA,kBACL;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBAAA;AAAA,cACF,CACD;AAAA,cACD,GAAG,oBAAoB;AAAA,gBACrB,SAAS;AAAA,gBACT,OAAO,CAAC,YAAY,6BAA6B;AAAA,cAAA,CAClD;AAAA,cACD,GAAG,oBAAoB;AAAA,gBACrB,SAAS,aAAa,SAAS;AAAA,gBAC/B,OAAO,CAAC,UAAU;AAAA,cAAA,CACnB;AAAA,YAAA,CACF;AAAA,UAAA;AAAA,QACH;AAAA,MACF;AAAA,MAEF,QAAQ,MAAM,IAAI;AAChB,cAAM,MACJ,KAAK,YAAY,SAAS,uBAAuB,SAC7C,WACA,KAAK,YAAY,SAAS,uBAAuB,SAC/C,YACC,MAAM;AACL,gBAAM,IAAI;AAAA,YACR,eAAe,KAAK,YAAY,IAAI;AAAA,UAAA;AAAA,QAExC,GAAA;AAER,cAAM,MAAM,cAAc,EAAE;AAC5B,YAAI,aAAa,OAAO,GAAG;AAC3B,aAAK,cAAc,GAAG,EAAE,QAAQ,OAAO,GAAG;AAE1C,YAAI,MAAO,SAAQ,KAAK,GAAG,GAAG,sBAAsB,EAAE;AAEtD,cAAM,WAAW,mBAAmB;AAAA,UAClC;AAAA,UACA,UAAU;AAAA,UACV;AAAA,QAAA,CACD;AAED,YAAI,OAAO;AACT,kBAAQ,MAAM,SAAS,IAAI;AAC3B,kBAAQ,IAAI,aAAa,SAAS,OAAO,MAAM;AAAA,QACjD;AAEA,eAAO;AAAA,MACT;AAAA,IAAA;AAAA,EACF;AAEJ;"}