{"version":3,"file":"pruneServerOnlySubtrees.js","sources":["../../../src/start-router-plugin/pruneServerOnlySubtrees.ts"],"sourcesContent":["import { SERVER_PROP } from './constants'\nimport type {\n  HandleNodeAccumulator,\n  RouteNode,\n} from '@tanstack/router-generator'\n\nexport function pruneServerOnlySubtrees({\n  rootRouteNode,\n  acc,\n}: {\n  rootRouteNode: RouteNode\n  acc: HandleNodeAccumulator\n}) {\n  const routeNodes: Array<RouteNode> = []\n  const routeTree =\n    prune({ ...rootRouteNode, children: acc.routeTree }, routeNodes)\n      ?.children || []\n  // remove root node from routeNodes\n  routeNodes.pop()\n  return {\n    routeTree,\n    routeNodes,\n  }\n}\nfunction prune(\n  node: RouteNode,\n  collectedRouteNodes: Array<RouteNode>,\n): RouteNode | null {\n  const newChildren: Array<RouteNode> = []\n  let allChildrenServerOnly = true\n\n  for (const child of node.children || []) {\n    const newChild = prune(child, collectedRouteNodes)\n    if (newChild) {\n      newChildren.push(newChild)\n      // at least one child survived pruning\n      allChildrenServerOnly = false\n    }\n  }\n\n  const allServerOnly =\n    node.createFileRouteProps?.has(SERVER_PROP) &&\n    node.createFileRouteProps.size === 1 &&\n    allChildrenServerOnly\n  // prune this subtree\n  if (allServerOnly) {\n    return null\n  }\n  collectedRouteNodes.push(node)\n  return { ...node, children: newChildren }\n}\n"],"names":[],"mappings":";AAMO,SAAS,wBAAwB;AAAA,EACtC;AAAA,EACA;AACF,GAGG;AACD,QAAM,aAA+B,CAAA;AACrC,QAAM,YACJ,MAAM,EAAE,GAAG,eAAe,UAAU,IAAI,UAAA,GAAa,UAAU,GAC3D,YAAY,CAAA;AAElB,aAAW,IAAA;AACX,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EAAA;AAEJ;AACA,SAAS,MACP,MACA,qBACkB;AAClB,QAAM,cAAgC,CAAA;AACtC,MAAI,wBAAwB;AAE5B,aAAW,SAAS,KAAK,YAAY,CAAA,GAAI;AACvC,UAAM,WAAW,MAAM,OAAO,mBAAmB;AACjD,QAAI,UAAU;AACZ,kBAAY,KAAK,QAAQ;AAEzB,8BAAwB;AAAA,IAC1B;AAAA,EACF;AAEA,QAAM,gBACJ,KAAK,sBAAsB,IAAI,WAAW,KAC1C,KAAK,qBAAqB,SAAS,KACnC;AAEF,MAAI,eAAe;AACjB,WAAO;AAAA,EACT;AACA,sBAAoB,KAAK,IAAI;AAC7B,SAAO,EAAE,GAAG,MAAM,UAAU,YAAA;AAC9B;"}