{"version":3,"file":"async-local-storage.js","sources":["../../src/async-local-storage.ts"],"sourcesContent":["import { AsyncLocalStorage } from 'node:async_hooks'\nimport type { Awaitable, RegisteredRouter } from '@tanstack/router-core'\n\nexport interface StartStorageContext {\n  getRouter: () => Awaitable<RegisteredRouter>\n\n  // TODO type this properly\n  startOptions: /* AnyStartInstanceOptions*/ any\n\n  contextAfterGlobalMiddlewares: any\n}\n\nconst startStorage = new AsyncLocalStorage<StartStorageContext>()\n\nexport async function runWithStartContext<T>(\n  context: StartStorageContext,\n  fn: () => T | Promise<T>,\n): Promise<T> {\n  return startStorage.run(context, fn)\n}\n\nexport function getStartContext<TThrow extends boolean = true>(opts?: {\n  throwIfNotFound?: TThrow\n}): TThrow extends false\n  ? StartStorageContext | undefined\n  : StartStorageContext {\n  const context = startStorage.getStore()\n  if (!context && opts?.throwIfNotFound !== false) {\n    throw new Error(\n      `No Start context found in AsyncLocalStorage. Make sure you are using the function within the server runtime.`,\n    )\n  }\n  return context as any\n}\n"],"names":[],"mappings":";AAYA,MAAM,eAAe,IAAI,kBAAA;AAEzB,eAAsB,oBACpB,SACA,IACY;AACZ,SAAO,aAAa,IAAI,SAAS,EAAE;AACrC;AAEO,SAAS,gBAA+C,MAIvC;AACtB,QAAM,UAAU,aAAa,SAAA;AAC7B,MAAI,CAAC,WAAW,MAAM,oBAAoB,OAAO;AAC/C,UAAM,IAAI;AAAA,MACR;AAAA,IAAA;AAAA,EAEJ;AACA,SAAO;AACT;"}