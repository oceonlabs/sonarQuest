import { BasicAuthOptions, CacheConditions, CorsOptions, DynamicEventHandler, ErrorBody, ErrorDetails, ErrorInput, EventHandler, EventHandlerObject, EventHandlerRequest, EventHandlerResponse, EventStreamMessage, EventStreamOptions, FetchHandler, H3$1 as H3, H3Config, H3Core$1 as H3Core, H3Error$1 as H3Error, H3Event$1 as H3Event, H3EventContext, H3Plugin, H3Route, H3RouteMeta, HTTPError$1 as HTTPError, HTTPEvent, HTTPMethod, InferEventInput, LazyEventHandler, Middleware, MiddlewareOptions, NodeHandler, NodeMiddleware, PreparedResponse, ProxyOptions, RequestFingerprintOptions, RouteDefinition, RouteOptions, ServeStaticOptions, Session, SessionConfig, SessionData, StaticAssetMeta, appendCorsHeaders$1 as appendCorsHeaders, appendCorsPreflightHeaders$1 as appendCorsPreflightHeaders, appendHeader$1 as appendHeader, appendHeaders$1 as appendHeaders, appendResponseHeader$1 as appendResponseHeader, appendResponseHeaders$1 as appendResponseHeaders, assertMethod$1 as assertMethod, basicAuth$1 as basicAuth, clearResponseHeaders$1 as clearResponseHeaders, clearSession$1 as clearSession, createApp$1 as createApp, createError$1 as createError, createEventStream$1 as createEventStream, createRouter$1 as createRouter, defaultContentType$1 as defaultContentType, defineEventHandler$1 as defineEventHandler, defineHandler$1 as defineHandler, defineLazyEventHandler$1 as defineLazyEventHandler, defineMiddleware$1 as defineMiddleware, defineNodeHandler$1 as defineNodeHandler, defineNodeListener$1 as defineNodeListener, defineNodeMiddleware$1 as defineNodeMiddleware, definePlugin$1 as definePlugin, defineRoute$1 as defineRoute, defineValidatedHandler$1 as defineValidatedHandler, defineWebSocket$1 as defineWebSocket, defineWebSocketHandler$1 as defineWebSocketHandler, deleteCookie$1 as deleteCookie, dynamicEventHandler$1 as dynamicEventHandler, eventHandler$1 as eventHandler, fetchWithEvent$1 as fetchWithEvent, fromNodeHandler$1 as fromNodeHandler, fromNodeMiddleware$1 as fromNodeMiddleware, fromWebHandler$1 as fromWebHandler, getBodyStream$1 as getBodyStream, getCookie$1 as getCookie, getEventContext$1 as getEventContext, getHeader$1 as getHeader, getHeaders$1 as getHeaders, getMethod$1 as getMethod, getProxyRequestHeaders$1 as getProxyRequestHeaders, getQuery$1 as getQuery, getRequestFingerprint$1 as getRequestFingerprint, getRequestHeader$1 as getRequestHeader, getRequestHeaders$1 as getRequestHeaders, getRequestHost$1 as getRequestHost, getRequestIP$1 as getRequestIP, getRequestPath$1 as getRequestPath, getRequestProtocol$1 as getRequestProtocol, getRequestURL$1 as getRequestURL, getRequestWebStream$1 as getRequestWebStream, getResponseHeader$1 as getResponseHeader, getResponseHeaders$1 as getResponseHeaders, getResponseStatus$1 as getResponseStatus, getResponseStatusText$1 as getResponseStatusText, getRouterParam$1 as getRouterParam, getRouterParams$1 as getRouterParams, getSession$1 as getSession, getValidatedQuery$1 as getValidatedQuery, getValidatedRouterParams$1 as getValidatedRouterParams, handleCacheHeaders$1 as handleCacheHeaders, handleCors$1 as handleCors, html$1 as html, isCorsOriginAllowed$1 as isCorsOriginAllowed, isError$1 as isError, isEvent$1 as isEvent, isHTTPEvent$1 as isHTTPEvent, isMethod$1 as isMethod, isPreflightRequest$1 as isPreflightRequest, iterable$1 as iterable, lazyEventHandler$1 as lazyEventHandler, mockEvent$1 as mockEvent, noContent$1 as noContent, onError$1 as onError, onRequest$1 as onRequest, onResponse$1 as onResponse, parseCookies$1 as parseCookies, proxy$1 as proxy, proxyRequest$1 as proxyRequest, readBody$1 as readBody, readFormData$1 as readFormData, readFormDataBody$1 as readFormDataBody, readMultipartFormData$1 as readMultipartFormData, readRawBody$1 as readRawBody, readValidatedBody$1 as readValidatedBody, redirect$1 as redirect, removeResponseHeader$1 as removeResponseHeader, requireBasicAuth$1 as requireBasicAuth, sanitizeStatusCode$1 as sanitizeStatusCode, sanitizeStatusMessage$1 as sanitizeStatusMessage, sealSession$1 as sealSession, sendIterable$1 as sendIterable, sendNoContent$1 as sendNoContent, sendProxy$1 as sendProxy, sendRedirect$1 as sendRedirect, sendStream$1 as sendStream, sendWebResponse$1 as sendWebResponse, serveStatic$1 as serveStatic, setCookie$1 as setCookie, setHeader$1 as setHeader, setHeaders$1 as setHeaders, setResponseHeader$1 as setResponseHeader, setResponseHeaders$1 as setResponseHeaders, setResponseStatus$1 as setResponseStatus, toEventHandler$1 as toEventHandler, toNodeHandler$1 as toNodeHandler, toNodeListener$1 as toNodeListener, toRequest$1 as toRequest, toResponse$1 as toResponse, toWebHandler$1 as toWebHandler, unsealSession$1 as unsealSession, updateSession$1 as updateSession, useBase$1 as useBase, useSession$1 as useSession, withBase$1 as withBase, writeEarlyHints$1 as writeEarlyHints } from "../h3.mjs";
import { Server, ServerOptions } from "srvx";

//#region src/_entries/bun.d.ts

/**
* Serve the H3 app.
*/
declare function serve(app: H3, options?: Omit<ServerOptions, "fetch">): Server;
//#endregion
export { BasicAuthOptions, CacheConditions, CorsOptions, DynamicEventHandler, ErrorBody, ErrorDetails, ErrorInput, EventHandler, EventHandlerObject, EventHandlerRequest, EventHandlerResponse, EventStreamMessage, EventStreamOptions, FetchHandler, H3, H3Config, H3Core, H3Error, H3Event, H3EventContext, H3Plugin, H3Route, H3RouteMeta, HTTPError, HTTPEvent, HTTPMethod, InferEventInput, LazyEventHandler, Middleware, MiddlewareOptions, NodeHandler, NodeMiddleware, PreparedResponse, ProxyOptions, RequestFingerprintOptions, RouteDefinition, RouteOptions, ServeStaticOptions, Session, SessionConfig, SessionData, StaticAssetMeta, appendCorsHeaders, appendCorsPreflightHeaders, appendHeader, appendHeaders, appendResponseHeader, appendResponseHeaders, assertMethod, basicAuth, clearResponseHeaders, clearSession, createApp, createError, createEventStream, createRouter, defaultContentType, defineEventHandler, defineHandler, defineLazyEventHandler, defineMiddleware, defineNodeHandler, defineNodeListener, defineNodeMiddleware, definePlugin, defineRoute, defineValidatedHandler, defineWebSocket, defineWebSocketHandler, deleteCookie, dynamicEventHandler, eventHandler, fetchWithEvent, fromNodeHandler, fromNodeMiddleware, fromWebHandler, getBodyStream, getCookie, getEventContext, getHeader, getHeaders, getMethod, getProxyRequestHeaders, getQuery, getRequestFingerprint, getRequestHeader, getRequestHeaders, getRequestHost, getRequestIP, getRequestPath, getRequestProtocol, getRequestURL, getRequestWebStream, getResponseHeader, getResponseHeaders, getResponseStatus, getResponseStatusText, getRouterParam, getRouterParams, getSession, getValidatedQuery, getValidatedRouterParams, handleCacheHeaders, handleCors, html, isCorsOriginAllowed, isError, isEvent, isHTTPEvent, isMethod, isPreflightRequest, iterable, lazyEventHandler, mockEvent, noContent, onError, onRequest, onResponse, parseCookies, proxy, proxyRequest, readBody, readFormData, readFormDataBody, readMultipartFormData, readRawBody, readValidatedBody, redirect, removeResponseHeader, requireBasicAuth, sanitizeStatusCode, sanitizeStatusMessage, sealSession, sendIterable, sendNoContent, sendProxy, sendRedirect, sendStream, sendWebResponse, serve, serveStatic, setCookie, setHeader, setHeaders, setResponseHeader, setResponseHeaders, setResponseStatus, toEventHandler, toNodeHandler, toNodeListener, toRequest, toResponse, toWebHandler, unsealSession, updateSession, useBase, useSession, withBase, writeEarlyHints };