/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as LeaderboardRouteImport } from './routes/leaderboard'
import { Route as AchievementsRouteImport } from './routes/achievements'
import { Route as IndexRouteImport } from './routes/index'

const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaderboardRoute = LeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AchievementsRoute = AchievementsRouteImport.update({
  id: '/achievements',
  path: '/achievements',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/achievements': typeof AchievementsRoute
  '/leaderboard': typeof LeaderboardRoute
  '/projects': typeof ProjectsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/achievements': typeof AchievementsRoute
  '/leaderboard': typeof LeaderboardRoute
  '/projects': typeof ProjectsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/achievements': typeof AchievementsRoute
  '/leaderboard': typeof LeaderboardRoute
  '/projects': typeof ProjectsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/achievements' | '/leaderboard' | '/projects'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/achievements' | '/leaderboard' | '/projects'
  id: '__root__' | '/' | '/achievements' | '/leaderboard' | '/projects'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AchievementsRoute: typeof AchievementsRoute
  LeaderboardRoute: typeof LeaderboardRoute
  ProjectsRoute: typeof ProjectsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leaderboard': {
      id: '/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/achievements': {
      id: '/achievements'
      path: '/achievements'
      fullPath: '/achievements'
      preLoaderRoute: typeof AchievementsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AchievementsRoute: AchievementsRoute,
  LeaderboardRoute: LeaderboardRoute,
  ProjectsRoute: ProjectsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
